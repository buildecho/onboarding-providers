AWSTemplateFormatVersion: '2010-09-09'
Description: 'ECR Pullthrough Cache Rule for Echo registry integration'

Parameters:
  Create:
    Type: String
    Description: 'Whether to create resources under this template'
    Default: 'true'
    AllowedValues:
      - 'true'
      - 'false'

  SourceRegistryAccountId:
    Type: String
    Description: 'The AWS account ID of the source ECR registry (Echo registry) - Get this from Echo platform'
    AllowedPattern: '^[0-9]{12}$'
    ConstraintDescription: 'Must be a valid 12-digit AWS account ID'
  
  SourceRegistryRegion:
    Type: String
    Description: 'The AWS region of the source ECR registry (Echo registry) - Get this from Echo platform'
    Default: 'us-east-1'
    AllowedValues:
      - us-east-1
  
  RepositoryNamePrefix:
    Type: String
    Description: 'Repository prefix for cached images - This will be the prefix in your registry'
    Default: 'echo-mirror'
  
  CacheRuleName:
    Type: String
    Description: 'Name for the pullthrough cache rule'
    Default: 'echo-mirror-cache-rule'
    AllowedPattern: '^[a-z0-9]+([._-][a-z0-9]+)*$'
    ConstraintDescription: 'Must contain only lowercase letters, numbers, periods, hyphens, and underscores'

Conditions:
  ShouldCreate: !Equals [!Ref Create, 'true']

Resources:
  ECRPullthroughCacheRule:
    Type: AWS::ECR::PullThroughCacheRule
    Condition: ShouldCreate
    Properties:
      EcrRepositoryPrefix: !Ref RepositoryNamePrefix
      UpstreamRegistry: 'ecr'
      UpstreamRegistryUrl: !Sub '${SourceRegistryAccountId}.dkr.ecr.${SourceRegistryRegion}.amazonaws.com'
      UpstreamRepositoryPrefix: 'ROOT'
      # Use CustomRoleArn for ECR private-to-private pullthrough cache
      CustomRoleArn: !GetAtt ECRAccessRole.Arn

  # IAM Role for ECR access
  ECRAccessRole:
    Type: AWS::IAM::Role
    Condition: ShouldCreate
    Properties:
      RoleName: !Sub '${CacheRuleName}-access-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: pullthroughcache.ecr.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: ECRPullthroughCachePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ecr:GetAuthorizationToken
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                  - ecr:BatchImportUpstreamImage
                  - ecr:GetImageCopyStatus
                  - ecr:InitiateLayerUpload
                  - ecr:UploadLayerPart
                  - ecr:CompleteLayerUpload
                  - ecr:PutImage
                Resource: '*'
      Tags:
        - Key: ManagedBy
          Value: cloudformation
        - Key: Purpose
          Value: echo-registry-integration
        - Key: Component
          Value: pullthrough-cache

Outputs:
  RepositoryPrefix:
    Description: 'Repository prefix for cached images'
    Value: !If [ShouldCreate, !Ref RepositoryNamePrefix, '']
    Export:
      Name: !Sub '${AWS::StackName}-Repository-Prefix'
  
  UpstreamRegistryUrl:
    Description: 'Echo registry URL'
    Value: !If [ShouldCreate, !Sub '${SourceRegistryAccountId}.dkr.ecr.${SourceRegistryRegion}.amazonaws.com', '']
    Export:
      Name: !Sub '${AWS::StackName}-Upstream-Registry-Url'
  
  AccessRoleArn:
    Description: 'ARN of the ECR access role'
    Value: !If [ShouldCreate, !GetAtt ECRAccessRole.Arn, '']
    Export:
      Name: !Sub '${AWS::StackName}-Access-Role-Arn'

  CacheRuleName:
    Description: 'Name of the pullthrough cache rule'
    Value: !If [ShouldCreate, !Ref CacheRuleName, '']
    Export:
      Name: !Sub '${AWS::StackName}-Cache-Rule-Name'
  
  UsageInstructions:
    Description: 'Instructions for using the Echo registry pullthrough cache'
    Value: !If 
      - ShouldCreate
      - !Sub |
        üéâ Echo Registry Pull-Through Cache Setup Complete!

        Your ECR is now configured to cache Echo images locally for improved performance and reduced data transfer costs.

        üì¶ How to Pull Echo Images:
        ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
        Use your local cache instead of pulling directly from Echo registry:

          docker pull ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${RepositoryNamePrefix}/<image-name>:<tag>

        Example:
          docker pull ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${RepositoryNamePrefix}/nginx:latest

        üí° Benefits:
        - ‚ö° Faster image pulls (cached locally in your AWS region)
        - üîí Enhanced security with your own AWS IAM access controls
        - üìä Better visibility into image usage through AWS CloudTrail
        - üîÑ Automatic cache updates every 24 hours
        - üí∞ Reduced data transfer costs

        ‚ö†Ô∏è  Important: Grant your services/applications these IAM permissions:
        {
            "Version": "2012-10-17",
            "Statement": [
                {
                    "Effect": "Allow",
                    "Action": [
                        "ecr:CreateRepository",
                        "ecr:BatchImportUpstreamImage"
                    ],
                    "Resource": "arn:aws:ecr:*:*:repository/${RepositoryNamePrefix}/*"
                },
                {
                    "Effect": "Allow",
                    "Action": [
                        "ecr:GetAuthorizationToken",
                        "ecr:BatchCheckLayerAvailability",
                        "ecr:GetDownloadUrlForLayer",
                        "ecr:BatchGetImage"
                    ],
                    "Resource": "*"
                }
            ]
        }

        üìö Additional Notes:
        - The first pull will fetch from Echo and cache in your ECR
        - Subsequent pulls use the cached version for faster performance
        - Configure ECR lifecycle policies to manage storage costs
        - Enable ECR image scanning for additional security

        Need help? Contact Echo support at support@echohq.com.
      - '' 