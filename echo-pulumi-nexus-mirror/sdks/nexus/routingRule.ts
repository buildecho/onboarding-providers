// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class RoutingRule extends pulumi.CustomResource {
    /**
     * Get an existing RoutingRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RoutingRuleState, opts?: pulumi.CustomResourceOptions): RoutingRule {
        return new RoutingRule(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'nexus:index/routingRule:RoutingRule';

    /**
     * Returns true if the given object is an instance of RoutingRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RoutingRule {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RoutingRule.__pulumiType;
    }

    /**
     * The description of the routing rule
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Matchers is a list of regular expressions used to identify request paths that are allowed or blocked (depending on above
     * mode)
     */
    public readonly matchers!: pulumi.Output<string[]>;
    /**
     * The mode describe how to hande with mathing requests. Possible values: `BLOCK` or `ALLOW` Default: `BLOCK`
     */
    public readonly mode!: pulumi.Output<string | undefined>;
    /**
     * The name of the routing rule
     */
    public readonly name!: pulumi.Output<string>;

    /**
     * Create a RoutingRule resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RoutingRuleArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RoutingRuleArgs | RoutingRuleState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RoutingRuleState | undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["matchers"] = state ? state.matchers : undefined;
            resourceInputs["mode"] = state ? state.mode : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
        } else {
            const args = argsOrState as RoutingRuleArgs | undefined;
            if ((!args || args.matchers === undefined) && !opts.urn) {
                throw new Error("Missing required property 'matchers'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["matchers"] = args ? args.matchers : undefined;
            resourceInputs["mode"] = args ? args.mode : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RoutingRule.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering RoutingRule resources.
 */
export interface RoutingRuleState {
    /**
     * The description of the routing rule
     */
    description?: pulumi.Input<string>;
    /**
     * Matchers is a list of regular expressions used to identify request paths that are allowed or blocked (depending on above
     * mode)
     */
    matchers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The mode describe how to hande with mathing requests. Possible values: `BLOCK` or `ALLOW` Default: `BLOCK`
     */
    mode?: pulumi.Input<string>;
    /**
     * The name of the routing rule
     */
    name?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a RoutingRule resource.
 */
export interface RoutingRuleArgs {
    /**
     * The description of the routing rule
     */
    description?: pulumi.Input<string>;
    /**
     * Matchers is a list of regular expressions used to identify request paths that are allowed or blocked (depending on above
     * mode)
     */
    matchers: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The mode describe how to hande with mathing requests. Possible values: `BLOCK` or `ALLOW` Default: `BLOCK`
     */
    mode?: pulumi.Input<string>;
    /**
     * The name of the routing rule
     */
    name?: pulumi.Input<string>;
}
