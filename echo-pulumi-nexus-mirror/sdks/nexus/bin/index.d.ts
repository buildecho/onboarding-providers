export { BlobstoreAzureArgs, BlobstoreAzureState } from "./blobstoreAzure";
export type BlobstoreAzure = import("./blobstoreAzure").BlobstoreAzure;
export declare const BlobstoreAzure: typeof import("./blobstoreAzure").BlobstoreAzure;
export { BlobstoreFileArgs, BlobstoreFileState } from "./blobstoreFile";
export type BlobstoreFile = import("./blobstoreFile").BlobstoreFile;
export declare const BlobstoreFile: typeof import("./blobstoreFile").BlobstoreFile;
export { BlobstoreGroupArgs, BlobstoreGroupState } from "./blobstoreGroup";
export type BlobstoreGroup = import("./blobstoreGroup").BlobstoreGroup;
export declare const BlobstoreGroup: typeof import("./blobstoreGroup").BlobstoreGroup;
export { BlobstoreS3Args, BlobstoreS3State } from "./blobstoreS3";
export type BlobstoreS3 = import("./blobstoreS3").BlobstoreS3;
export declare const BlobstoreS3: typeof import("./blobstoreS3").BlobstoreS3;
export { GetBlobstoreAzureArgs, GetBlobstoreAzureResult, GetBlobstoreAzureOutputArgs } from "./getBlobstoreAzure";
export declare const getBlobstoreAzure: typeof import("./getBlobstoreAzure").getBlobstoreAzure;
export declare const getBlobstoreAzureOutput: typeof import("./getBlobstoreAzure").getBlobstoreAzureOutput;
export { GetBlobstoreFileArgs, GetBlobstoreFileResult, GetBlobstoreFileOutputArgs } from "./getBlobstoreFile";
export declare const getBlobstoreFile: typeof import("./getBlobstoreFile").getBlobstoreFile;
export declare const getBlobstoreFileOutput: typeof import("./getBlobstoreFile").getBlobstoreFileOutput;
export { GetBlobstoreGroupArgs, GetBlobstoreGroupResult, GetBlobstoreGroupOutputArgs } from "./getBlobstoreGroup";
export declare const getBlobstoreGroup: typeof import("./getBlobstoreGroup").getBlobstoreGroup;
export declare const getBlobstoreGroupOutput: typeof import("./getBlobstoreGroup").getBlobstoreGroupOutput;
export { GetBlobstoreListResult } from "./getBlobstoreList";
export declare const getBlobstoreList: typeof import("./getBlobstoreList").getBlobstoreList;
export declare const getBlobstoreListOutput: typeof import("./getBlobstoreList").getBlobstoreListOutput;
export { GetBlobstoreS3Args, GetBlobstoreS3Result, GetBlobstoreS3OutputArgs } from "./getBlobstoreS3";
export declare const getBlobstoreS3: typeof import("./getBlobstoreS3").getBlobstoreS3;
export declare const getBlobstoreS3Output: typeof import("./getBlobstoreS3").getBlobstoreS3Output;
export { GetMailConfigResult } from "./getMailConfig";
export declare const getMailConfig: typeof import("./getMailConfig").getMailConfig;
export declare const getMailConfigOutput: typeof import("./getMailConfig").getMailConfigOutput;
export { GetPrivilegeApplicationArgs, GetPrivilegeApplicationResult, GetPrivilegeApplicationOutputArgs } from "./getPrivilegeApplication";
export declare const getPrivilegeApplication: typeof import("./getPrivilegeApplication").getPrivilegeApplication;
export declare const getPrivilegeApplicationOutput: typeof import("./getPrivilegeApplication").getPrivilegeApplicationOutput;
export { GetPrivilegeRepositoryAdminArgs, GetPrivilegeRepositoryAdminResult, GetPrivilegeRepositoryAdminOutputArgs } from "./getPrivilegeRepositoryAdmin";
export declare const getPrivilegeRepositoryAdmin: typeof import("./getPrivilegeRepositoryAdmin").getPrivilegeRepositoryAdmin;
export declare const getPrivilegeRepositoryAdminOutput: typeof import("./getPrivilegeRepositoryAdmin").getPrivilegeRepositoryAdminOutput;
export { GetPrivilegeRepositoryContentSelectorArgs, GetPrivilegeRepositoryContentSelectorResult, GetPrivilegeRepositoryContentSelectorOutputArgs } from "./getPrivilegeRepositoryContentSelector";
export declare const getPrivilegeRepositoryContentSelector: typeof import("./getPrivilegeRepositoryContentSelector").getPrivilegeRepositoryContentSelector;
export declare const getPrivilegeRepositoryContentSelectorOutput: typeof import("./getPrivilegeRepositoryContentSelector").getPrivilegeRepositoryContentSelectorOutput;
export { GetPrivilegeRepositoryViewArgs, GetPrivilegeRepositoryViewResult, GetPrivilegeRepositoryViewOutputArgs } from "./getPrivilegeRepositoryView";
export declare const getPrivilegeRepositoryView: typeof import("./getPrivilegeRepositoryView").getPrivilegeRepositoryView;
export declare const getPrivilegeRepositoryViewOutput: typeof import("./getPrivilegeRepositoryView").getPrivilegeRepositoryViewOutput;
export { GetPrivilegeScriptArgs, GetPrivilegeScriptResult, GetPrivilegeScriptOutputArgs } from "./getPrivilegeScript";
export declare const getPrivilegeScript: typeof import("./getPrivilegeScript").getPrivilegeScript;
export declare const getPrivilegeScriptOutput: typeof import("./getPrivilegeScript").getPrivilegeScriptOutput;
export { GetPrivilegeWildcardArgs, GetPrivilegeWildcardResult, GetPrivilegeWildcardOutputArgs } from "./getPrivilegeWildcard";
export declare const getPrivilegeWildcard: typeof import("./getPrivilegeWildcard").getPrivilegeWildcard;
export declare const getPrivilegeWildcardOutput: typeof import("./getPrivilegeWildcard").getPrivilegeWildcardOutput;
export { GetRepositoryAptHostedArgs, GetRepositoryAptHostedResult, GetRepositoryAptHostedOutputArgs } from "./getRepositoryAptHosted";
export declare const getRepositoryAptHosted: typeof import("./getRepositoryAptHosted").getRepositoryAptHosted;
export declare const getRepositoryAptHostedOutput: typeof import("./getRepositoryAptHosted").getRepositoryAptHostedOutput;
export { GetRepositoryAptProxyArgs, GetRepositoryAptProxyResult, GetRepositoryAptProxyOutputArgs } from "./getRepositoryAptProxy";
export declare const getRepositoryAptProxy: typeof import("./getRepositoryAptProxy").getRepositoryAptProxy;
export declare const getRepositoryAptProxyOutput: typeof import("./getRepositoryAptProxy").getRepositoryAptProxyOutput;
export { GetRepositoryBowerGroupArgs, GetRepositoryBowerGroupResult, GetRepositoryBowerGroupOutputArgs } from "./getRepositoryBowerGroup";
export declare const getRepositoryBowerGroup: typeof import("./getRepositoryBowerGroup").getRepositoryBowerGroup;
export declare const getRepositoryBowerGroupOutput: typeof import("./getRepositoryBowerGroup").getRepositoryBowerGroupOutput;
export { GetRepositoryBowerHostedArgs, GetRepositoryBowerHostedResult, GetRepositoryBowerHostedOutputArgs } from "./getRepositoryBowerHosted";
export declare const getRepositoryBowerHosted: typeof import("./getRepositoryBowerHosted").getRepositoryBowerHosted;
export declare const getRepositoryBowerHostedOutput: typeof import("./getRepositoryBowerHosted").getRepositoryBowerHostedOutput;
export { GetRepositoryBowerProxyArgs, GetRepositoryBowerProxyResult, GetRepositoryBowerProxyOutputArgs } from "./getRepositoryBowerProxy";
export declare const getRepositoryBowerProxy: typeof import("./getRepositoryBowerProxy").getRepositoryBowerProxy;
export declare const getRepositoryBowerProxyOutput: typeof import("./getRepositoryBowerProxy").getRepositoryBowerProxyOutput;
export { GetRepositoryCargoGroupArgs, GetRepositoryCargoGroupResult, GetRepositoryCargoGroupOutputArgs } from "./getRepositoryCargoGroup";
export declare const getRepositoryCargoGroup: typeof import("./getRepositoryCargoGroup").getRepositoryCargoGroup;
export declare const getRepositoryCargoGroupOutput: typeof import("./getRepositoryCargoGroup").getRepositoryCargoGroupOutput;
export { GetRepositoryCargoHostedArgs, GetRepositoryCargoHostedResult, GetRepositoryCargoHostedOutputArgs } from "./getRepositoryCargoHosted";
export declare const getRepositoryCargoHosted: typeof import("./getRepositoryCargoHosted").getRepositoryCargoHosted;
export declare const getRepositoryCargoHostedOutput: typeof import("./getRepositoryCargoHosted").getRepositoryCargoHostedOutput;
export { GetRepositoryCargoProxyArgs, GetRepositoryCargoProxyResult, GetRepositoryCargoProxyOutputArgs } from "./getRepositoryCargoProxy";
export declare const getRepositoryCargoProxy: typeof import("./getRepositoryCargoProxy").getRepositoryCargoProxy;
export declare const getRepositoryCargoProxyOutput: typeof import("./getRepositoryCargoProxy").getRepositoryCargoProxyOutput;
export { GetRepositoryCocoapodsProxyArgs, GetRepositoryCocoapodsProxyResult, GetRepositoryCocoapodsProxyOutputArgs } from "./getRepositoryCocoapodsProxy";
export declare const getRepositoryCocoapodsProxy: typeof import("./getRepositoryCocoapodsProxy").getRepositoryCocoapodsProxy;
export declare const getRepositoryCocoapodsProxyOutput: typeof import("./getRepositoryCocoapodsProxy").getRepositoryCocoapodsProxyOutput;
export { GetRepositoryConanProxyArgs, GetRepositoryConanProxyResult, GetRepositoryConanProxyOutputArgs } from "./getRepositoryConanProxy";
export declare const getRepositoryConanProxy: typeof import("./getRepositoryConanProxy").getRepositoryConanProxy;
export declare const getRepositoryConanProxyOutput: typeof import("./getRepositoryConanProxy").getRepositoryConanProxyOutput;
export { GetRepositoryCondaProxyArgs, GetRepositoryCondaProxyResult, GetRepositoryCondaProxyOutputArgs } from "./getRepositoryCondaProxy";
export declare const getRepositoryCondaProxy: typeof import("./getRepositoryCondaProxy").getRepositoryCondaProxy;
export declare const getRepositoryCondaProxyOutput: typeof import("./getRepositoryCondaProxy").getRepositoryCondaProxyOutput;
export { GetRepositoryDockerGroupArgs, GetRepositoryDockerGroupResult, GetRepositoryDockerGroupOutputArgs } from "./getRepositoryDockerGroup";
export declare const getRepositoryDockerGroup: typeof import("./getRepositoryDockerGroup").getRepositoryDockerGroup;
export declare const getRepositoryDockerGroupOutput: typeof import("./getRepositoryDockerGroup").getRepositoryDockerGroupOutput;
export { GetRepositoryDockerHostedArgs, GetRepositoryDockerHostedResult, GetRepositoryDockerHostedOutputArgs } from "./getRepositoryDockerHosted";
export declare const getRepositoryDockerHosted: typeof import("./getRepositoryDockerHosted").getRepositoryDockerHosted;
export declare const getRepositoryDockerHostedOutput: typeof import("./getRepositoryDockerHosted").getRepositoryDockerHostedOutput;
export { GetRepositoryDockerProxyArgs, GetRepositoryDockerProxyResult, GetRepositoryDockerProxyOutputArgs } from "./getRepositoryDockerProxy";
export declare const getRepositoryDockerProxy: typeof import("./getRepositoryDockerProxy").getRepositoryDockerProxy;
export declare const getRepositoryDockerProxyOutput: typeof import("./getRepositoryDockerProxy").getRepositoryDockerProxyOutput;
export { GetRepositoryGitlfsHostedArgs, GetRepositoryGitlfsHostedResult, GetRepositoryGitlfsHostedOutputArgs } from "./getRepositoryGitlfsHosted";
export declare const getRepositoryGitlfsHosted: typeof import("./getRepositoryGitlfsHosted").getRepositoryGitlfsHosted;
export declare const getRepositoryGitlfsHostedOutput: typeof import("./getRepositoryGitlfsHosted").getRepositoryGitlfsHostedOutput;
export { GetRepositoryGoGroupArgs, GetRepositoryGoGroupResult, GetRepositoryGoGroupOutputArgs } from "./getRepositoryGoGroup";
export declare const getRepositoryGoGroup: typeof import("./getRepositoryGoGroup").getRepositoryGoGroup;
export declare const getRepositoryGoGroupOutput: typeof import("./getRepositoryGoGroup").getRepositoryGoGroupOutput;
export { GetRepositoryGoProxyArgs, GetRepositoryGoProxyResult, GetRepositoryGoProxyOutputArgs } from "./getRepositoryGoProxy";
export declare const getRepositoryGoProxy: typeof import("./getRepositoryGoProxy").getRepositoryGoProxy;
export declare const getRepositoryGoProxyOutput: typeof import("./getRepositoryGoProxy").getRepositoryGoProxyOutput;
export { GetRepositoryHelmHostedArgs, GetRepositoryHelmHostedResult, GetRepositoryHelmHostedOutputArgs } from "./getRepositoryHelmHosted";
export declare const getRepositoryHelmHosted: typeof import("./getRepositoryHelmHosted").getRepositoryHelmHosted;
export declare const getRepositoryHelmHostedOutput: typeof import("./getRepositoryHelmHosted").getRepositoryHelmHostedOutput;
export { GetRepositoryHelmProxyArgs, GetRepositoryHelmProxyResult, GetRepositoryHelmProxyOutputArgs } from "./getRepositoryHelmProxy";
export declare const getRepositoryHelmProxy: typeof import("./getRepositoryHelmProxy").getRepositoryHelmProxy;
export declare const getRepositoryHelmProxyOutput: typeof import("./getRepositoryHelmProxy").getRepositoryHelmProxyOutput;
export { GetRepositoryListResult } from "./getRepositoryList";
export declare const getRepositoryList: typeof import("./getRepositoryList").getRepositoryList;
export declare const getRepositoryListOutput: typeof import("./getRepositoryList").getRepositoryListOutput;
export { GetRepositoryMavenGroupArgs, GetRepositoryMavenGroupResult, GetRepositoryMavenGroupOutputArgs } from "./getRepositoryMavenGroup";
export declare const getRepositoryMavenGroup: typeof import("./getRepositoryMavenGroup").getRepositoryMavenGroup;
export declare const getRepositoryMavenGroupOutput: typeof import("./getRepositoryMavenGroup").getRepositoryMavenGroupOutput;
export { GetRepositoryMavenHostedArgs, GetRepositoryMavenHostedResult, GetRepositoryMavenHostedOutputArgs } from "./getRepositoryMavenHosted";
export declare const getRepositoryMavenHosted: typeof import("./getRepositoryMavenHosted").getRepositoryMavenHosted;
export declare const getRepositoryMavenHostedOutput: typeof import("./getRepositoryMavenHosted").getRepositoryMavenHostedOutput;
export { GetRepositoryMavenProxyArgs, GetRepositoryMavenProxyResult, GetRepositoryMavenProxyOutputArgs } from "./getRepositoryMavenProxy";
export declare const getRepositoryMavenProxy: typeof import("./getRepositoryMavenProxy").getRepositoryMavenProxy;
export declare const getRepositoryMavenProxyOutput: typeof import("./getRepositoryMavenProxy").getRepositoryMavenProxyOutput;
export { GetRepositoryNpmGroupArgs, GetRepositoryNpmGroupResult, GetRepositoryNpmGroupOutputArgs } from "./getRepositoryNpmGroup";
export declare const getRepositoryNpmGroup: typeof import("./getRepositoryNpmGroup").getRepositoryNpmGroup;
export declare const getRepositoryNpmGroupOutput: typeof import("./getRepositoryNpmGroup").getRepositoryNpmGroupOutput;
export { GetRepositoryNpmHostedArgs, GetRepositoryNpmHostedResult, GetRepositoryNpmHostedOutputArgs } from "./getRepositoryNpmHosted";
export declare const getRepositoryNpmHosted: typeof import("./getRepositoryNpmHosted").getRepositoryNpmHosted;
export declare const getRepositoryNpmHostedOutput: typeof import("./getRepositoryNpmHosted").getRepositoryNpmHostedOutput;
export { GetRepositoryNpmProxyArgs, GetRepositoryNpmProxyResult, GetRepositoryNpmProxyOutputArgs } from "./getRepositoryNpmProxy";
export declare const getRepositoryNpmProxy: typeof import("./getRepositoryNpmProxy").getRepositoryNpmProxy;
export declare const getRepositoryNpmProxyOutput: typeof import("./getRepositoryNpmProxy").getRepositoryNpmProxyOutput;
export { GetRepositoryNugetGroupArgs, GetRepositoryNugetGroupResult, GetRepositoryNugetGroupOutputArgs } from "./getRepositoryNugetGroup";
export declare const getRepositoryNugetGroup: typeof import("./getRepositoryNugetGroup").getRepositoryNugetGroup;
export declare const getRepositoryNugetGroupOutput: typeof import("./getRepositoryNugetGroup").getRepositoryNugetGroupOutput;
export { GetRepositoryNugetHostedArgs, GetRepositoryNugetHostedResult, GetRepositoryNugetHostedOutputArgs } from "./getRepositoryNugetHosted";
export declare const getRepositoryNugetHosted: typeof import("./getRepositoryNugetHosted").getRepositoryNugetHosted;
export declare const getRepositoryNugetHostedOutput: typeof import("./getRepositoryNugetHosted").getRepositoryNugetHostedOutput;
export { GetRepositoryNugetProxyArgs, GetRepositoryNugetProxyResult, GetRepositoryNugetProxyOutputArgs } from "./getRepositoryNugetProxy";
export declare const getRepositoryNugetProxy: typeof import("./getRepositoryNugetProxy").getRepositoryNugetProxy;
export declare const getRepositoryNugetProxyOutput: typeof import("./getRepositoryNugetProxy").getRepositoryNugetProxyOutput;
export { GetRepositoryP2ProxyArgs, GetRepositoryP2ProxyResult, GetRepositoryP2ProxyOutputArgs } from "./getRepositoryP2Proxy";
export declare const getRepositoryP2Proxy: typeof import("./getRepositoryP2Proxy").getRepositoryP2Proxy;
export declare const getRepositoryP2ProxyOutput: typeof import("./getRepositoryP2Proxy").getRepositoryP2ProxyOutput;
export { GetRepositoryPypiGroupArgs, GetRepositoryPypiGroupResult, GetRepositoryPypiGroupOutputArgs } from "./getRepositoryPypiGroup";
export declare const getRepositoryPypiGroup: typeof import("./getRepositoryPypiGroup").getRepositoryPypiGroup;
export declare const getRepositoryPypiGroupOutput: typeof import("./getRepositoryPypiGroup").getRepositoryPypiGroupOutput;
export { GetRepositoryPypiHostedArgs, GetRepositoryPypiHostedResult, GetRepositoryPypiHostedOutputArgs } from "./getRepositoryPypiHosted";
export declare const getRepositoryPypiHosted: typeof import("./getRepositoryPypiHosted").getRepositoryPypiHosted;
export declare const getRepositoryPypiHostedOutput: typeof import("./getRepositoryPypiHosted").getRepositoryPypiHostedOutput;
export { GetRepositoryPypiProxyArgs, GetRepositoryPypiProxyResult, GetRepositoryPypiProxyOutputArgs } from "./getRepositoryPypiProxy";
export declare const getRepositoryPypiProxy: typeof import("./getRepositoryPypiProxy").getRepositoryPypiProxy;
export declare const getRepositoryPypiProxyOutput: typeof import("./getRepositoryPypiProxy").getRepositoryPypiProxyOutput;
export { GetRepositoryRGroupArgs, GetRepositoryRGroupResult, GetRepositoryRGroupOutputArgs } from "./getRepositoryRGroup";
export declare const getRepositoryRGroup: typeof import("./getRepositoryRGroup").getRepositoryRGroup;
export declare const getRepositoryRGroupOutput: typeof import("./getRepositoryRGroup").getRepositoryRGroupOutput;
export { GetRepositoryRHostedArgs, GetRepositoryRHostedResult, GetRepositoryRHostedOutputArgs } from "./getRepositoryRHosted";
export declare const getRepositoryRHosted: typeof import("./getRepositoryRHosted").getRepositoryRHosted;
export declare const getRepositoryRHostedOutput: typeof import("./getRepositoryRHosted").getRepositoryRHostedOutput;
export { GetRepositoryRProxyArgs, GetRepositoryRProxyResult, GetRepositoryRProxyOutputArgs } from "./getRepositoryRProxy";
export declare const getRepositoryRProxy: typeof import("./getRepositoryRProxy").getRepositoryRProxy;
export declare const getRepositoryRProxyOutput: typeof import("./getRepositoryRProxy").getRepositoryRProxyOutput;
export { GetRepositoryRawGroupArgs, GetRepositoryRawGroupResult, GetRepositoryRawGroupOutputArgs } from "./getRepositoryRawGroup";
export declare const getRepositoryRawGroup: typeof import("./getRepositoryRawGroup").getRepositoryRawGroup;
export declare const getRepositoryRawGroupOutput: typeof import("./getRepositoryRawGroup").getRepositoryRawGroupOutput;
export { GetRepositoryRawHostedArgs, GetRepositoryRawHostedResult, GetRepositoryRawHostedOutputArgs } from "./getRepositoryRawHosted";
export declare const getRepositoryRawHosted: typeof import("./getRepositoryRawHosted").getRepositoryRawHosted;
export declare const getRepositoryRawHostedOutput: typeof import("./getRepositoryRawHosted").getRepositoryRawHostedOutput;
export { GetRepositoryRawProxyArgs, GetRepositoryRawProxyResult, GetRepositoryRawProxyOutputArgs } from "./getRepositoryRawProxy";
export declare const getRepositoryRawProxy: typeof import("./getRepositoryRawProxy").getRepositoryRawProxy;
export declare const getRepositoryRawProxyOutput: typeof import("./getRepositoryRawProxy").getRepositoryRawProxyOutput;
export { GetRepositoryRubygemsGroupArgs, GetRepositoryRubygemsGroupResult, GetRepositoryRubygemsGroupOutputArgs } from "./getRepositoryRubygemsGroup";
export declare const getRepositoryRubygemsGroup: typeof import("./getRepositoryRubygemsGroup").getRepositoryRubygemsGroup;
export declare const getRepositoryRubygemsGroupOutput: typeof import("./getRepositoryRubygemsGroup").getRepositoryRubygemsGroupOutput;
export { GetRepositoryRubygemsHostedArgs, GetRepositoryRubygemsHostedResult, GetRepositoryRubygemsHostedOutputArgs } from "./getRepositoryRubygemsHosted";
export declare const getRepositoryRubygemsHosted: typeof import("./getRepositoryRubygemsHosted").getRepositoryRubygemsHosted;
export declare const getRepositoryRubygemsHostedOutput: typeof import("./getRepositoryRubygemsHosted").getRepositoryRubygemsHostedOutput;
export { GetRepositoryRubygemsProxyArgs, GetRepositoryRubygemsProxyResult, GetRepositoryRubygemsProxyOutputArgs } from "./getRepositoryRubygemsProxy";
export declare const getRepositoryRubygemsProxy: typeof import("./getRepositoryRubygemsProxy").getRepositoryRubygemsProxy;
export declare const getRepositoryRubygemsProxyOutput: typeof import("./getRepositoryRubygemsProxy").getRepositoryRubygemsProxyOutput;
export { GetRepositoryYumGroupArgs, GetRepositoryYumGroupResult, GetRepositoryYumGroupOutputArgs } from "./getRepositoryYumGroup";
export declare const getRepositoryYumGroup: typeof import("./getRepositoryYumGroup").getRepositoryYumGroup;
export declare const getRepositoryYumGroupOutput: typeof import("./getRepositoryYumGroup").getRepositoryYumGroupOutput;
export { GetRepositoryYumHostedArgs, GetRepositoryYumHostedResult, GetRepositoryYumHostedOutputArgs } from "./getRepositoryYumHosted";
export declare const getRepositoryYumHosted: typeof import("./getRepositoryYumHosted").getRepositoryYumHosted;
export declare const getRepositoryYumHostedOutput: typeof import("./getRepositoryYumHosted").getRepositoryYumHostedOutput;
export { GetRepositoryYumProxyArgs, GetRepositoryYumProxyResult, GetRepositoryYumProxyOutputArgs } from "./getRepositoryYumProxy";
export declare const getRepositoryYumProxy: typeof import("./getRepositoryYumProxy").getRepositoryYumProxy;
export declare const getRepositoryYumProxyOutput: typeof import("./getRepositoryYumProxy").getRepositoryYumProxyOutput;
export { GetRoutingRuleArgs, GetRoutingRuleResult, GetRoutingRuleOutputArgs } from "./getRoutingRule";
export declare const getRoutingRule: typeof import("./getRoutingRule").getRoutingRule;
export declare const getRoutingRuleOutput: typeof import("./getRoutingRule").getRoutingRuleOutput;
export { GetSecurityAnonymousResult } from "./getSecurityAnonymous";
export declare const getSecurityAnonymous: typeof import("./getSecurityAnonymous").getSecurityAnonymous;
export declare const getSecurityAnonymousOutput: typeof import("./getSecurityAnonymous").getSecurityAnonymousOutput;
export { GetSecurityContentSelectorArgs, GetSecurityContentSelectorResult, GetSecurityContentSelectorOutputArgs } from "./getSecurityContentSelector";
export declare const getSecurityContentSelector: typeof import("./getSecurityContentSelector").getSecurityContentSelector;
export declare const getSecurityContentSelectorOutput: typeof import("./getSecurityContentSelector").getSecurityContentSelectorOutput;
export { GetSecurityLdapResult } from "./getSecurityLdap";
export declare const getSecurityLdap: typeof import("./getSecurityLdap").getSecurityLdap;
export declare const getSecurityLdapOutput: typeof import("./getSecurityLdap").getSecurityLdapOutput;
export { GetSecurityRealmsResult } from "./getSecurityRealms";
export declare const getSecurityRealms: typeof import("./getSecurityRealms").getSecurityRealms;
export declare const getSecurityRealmsOutput: typeof import("./getSecurityRealms").getSecurityRealmsOutput;
export { GetSecurityRoleArgs, GetSecurityRoleResult, GetSecurityRoleOutputArgs } from "./getSecurityRole";
export declare const getSecurityRole: typeof import("./getSecurityRole").getSecurityRole;
export declare const getSecurityRoleOutput: typeof import("./getSecurityRole").getSecurityRoleOutput;
export { GetSecuritySamlResult } from "./getSecuritySaml";
export declare const getSecuritySaml: typeof import("./getSecuritySaml").getSecuritySaml;
export declare const getSecuritySamlOutput: typeof import("./getSecuritySaml").getSecuritySamlOutput;
export { GetSecuritySslArgs, GetSecuritySslResult, GetSecuritySslOutputArgs } from "./getSecuritySsl";
export declare const getSecuritySsl: typeof import("./getSecuritySsl").getSecuritySsl;
export declare const getSecuritySslOutput: typeof import("./getSecuritySsl").getSecuritySslOutput;
export { GetSecuritySslTruststoreResult } from "./getSecuritySslTruststore";
export declare const getSecuritySslTruststore: typeof import("./getSecuritySslTruststore").getSecuritySslTruststore;
export declare const getSecuritySslTruststoreOutput: typeof import("./getSecuritySslTruststore").getSecuritySslTruststoreOutput;
export { GetSecurityUserArgs, GetSecurityUserResult, GetSecurityUserOutputArgs } from "./getSecurityUser";
export declare const getSecurityUser: typeof import("./getSecurityUser").getSecurityUser;
export declare const getSecurityUserOutput: typeof import("./getSecurityUser").getSecurityUserOutput;
export { GetSecurityUserTokenResult } from "./getSecurityUserToken";
export declare const getSecurityUserToken: typeof import("./getSecurityUserToken").getSecurityUserToken;
export declare const getSecurityUserTokenOutput: typeof import("./getSecurityUserToken").getSecurityUserTokenOutput;
export { MailConfigArgs, MailConfigState } from "./mailConfig";
export type MailConfig = import("./mailConfig").MailConfig;
export declare const MailConfig: typeof import("./mailConfig").MailConfig;
export { PrivilegeApplicationArgs, PrivilegeApplicationState } from "./privilegeApplication";
export type PrivilegeApplication = import("./privilegeApplication").PrivilegeApplication;
export declare const PrivilegeApplication: typeof import("./privilegeApplication").PrivilegeApplication;
export { PrivilegeRepositoryAdminArgs, PrivilegeRepositoryAdminState } from "./privilegeRepositoryAdmin";
export type PrivilegeRepositoryAdmin = import("./privilegeRepositoryAdmin").PrivilegeRepositoryAdmin;
export declare const PrivilegeRepositoryAdmin: typeof import("./privilegeRepositoryAdmin").PrivilegeRepositoryAdmin;
export { PrivilegeRepositoryContentSelectorArgs, PrivilegeRepositoryContentSelectorState } from "./privilegeRepositoryContentSelector";
export type PrivilegeRepositoryContentSelector = import("./privilegeRepositoryContentSelector").PrivilegeRepositoryContentSelector;
export declare const PrivilegeRepositoryContentSelector: typeof import("./privilegeRepositoryContentSelector").PrivilegeRepositoryContentSelector;
export { PrivilegeRepositoryViewArgs, PrivilegeRepositoryViewState } from "./privilegeRepositoryView";
export type PrivilegeRepositoryView = import("./privilegeRepositoryView").PrivilegeRepositoryView;
export declare const PrivilegeRepositoryView: typeof import("./privilegeRepositoryView").PrivilegeRepositoryView;
export { PrivilegeScriptArgs, PrivilegeScriptState } from "./privilegeScript";
export type PrivilegeScript = import("./privilegeScript").PrivilegeScript;
export declare const PrivilegeScript: typeof import("./privilegeScript").PrivilegeScript;
export { PrivilegeWildcardArgs, PrivilegeWildcardState } from "./privilegeWildcard";
export type PrivilegeWildcard = import("./privilegeWildcard").PrivilegeWildcard;
export declare const PrivilegeWildcard: typeof import("./privilegeWildcard").PrivilegeWildcard;
export * from "./provider";
export { RepositoryAptHostedArgs, RepositoryAptHostedState } from "./repositoryAptHosted";
export type RepositoryAptHosted = import("./repositoryAptHosted").RepositoryAptHosted;
export declare const RepositoryAptHosted: typeof import("./repositoryAptHosted").RepositoryAptHosted;
export { RepositoryAptProxyArgs, RepositoryAptProxyState } from "./repositoryAptProxy";
export type RepositoryAptProxy = import("./repositoryAptProxy").RepositoryAptProxy;
export declare const RepositoryAptProxy: typeof import("./repositoryAptProxy").RepositoryAptProxy;
export { RepositoryBowerGroupArgs, RepositoryBowerGroupState } from "./repositoryBowerGroup";
export type RepositoryBowerGroup = import("./repositoryBowerGroup").RepositoryBowerGroup;
export declare const RepositoryBowerGroup: typeof import("./repositoryBowerGroup").RepositoryBowerGroup;
export { RepositoryBowerHostedArgs, RepositoryBowerHostedState } from "./repositoryBowerHosted";
export type RepositoryBowerHosted = import("./repositoryBowerHosted").RepositoryBowerHosted;
export declare const RepositoryBowerHosted: typeof import("./repositoryBowerHosted").RepositoryBowerHosted;
export { RepositoryBowerProxyArgs, RepositoryBowerProxyState } from "./repositoryBowerProxy";
export type RepositoryBowerProxy = import("./repositoryBowerProxy").RepositoryBowerProxy;
export declare const RepositoryBowerProxy: typeof import("./repositoryBowerProxy").RepositoryBowerProxy;
export { RepositoryCargoGroupArgs, RepositoryCargoGroupState } from "./repositoryCargoGroup";
export type RepositoryCargoGroup = import("./repositoryCargoGroup").RepositoryCargoGroup;
export declare const RepositoryCargoGroup: typeof import("./repositoryCargoGroup").RepositoryCargoGroup;
export { RepositoryCargoHostedArgs, RepositoryCargoHostedState } from "./repositoryCargoHosted";
export type RepositoryCargoHosted = import("./repositoryCargoHosted").RepositoryCargoHosted;
export declare const RepositoryCargoHosted: typeof import("./repositoryCargoHosted").RepositoryCargoHosted;
export { RepositoryCargoProxyArgs, RepositoryCargoProxyState } from "./repositoryCargoProxy";
export type RepositoryCargoProxy = import("./repositoryCargoProxy").RepositoryCargoProxy;
export declare const RepositoryCargoProxy: typeof import("./repositoryCargoProxy").RepositoryCargoProxy;
export { RepositoryCocoapodsProxyArgs, RepositoryCocoapodsProxyState } from "./repositoryCocoapodsProxy";
export type RepositoryCocoapodsProxy = import("./repositoryCocoapodsProxy").RepositoryCocoapodsProxy;
export declare const RepositoryCocoapodsProxy: typeof import("./repositoryCocoapodsProxy").RepositoryCocoapodsProxy;
export { RepositoryConanProxyArgs, RepositoryConanProxyState } from "./repositoryConanProxy";
export type RepositoryConanProxy = import("./repositoryConanProxy").RepositoryConanProxy;
export declare const RepositoryConanProxy: typeof import("./repositoryConanProxy").RepositoryConanProxy;
export { RepositoryCondaProxyArgs, RepositoryCondaProxyState } from "./repositoryCondaProxy";
export type RepositoryCondaProxy = import("./repositoryCondaProxy").RepositoryCondaProxy;
export declare const RepositoryCondaProxy: typeof import("./repositoryCondaProxy").RepositoryCondaProxy;
export { RepositoryDockerGroupArgs, RepositoryDockerGroupState } from "./repositoryDockerGroup";
export type RepositoryDockerGroup = import("./repositoryDockerGroup").RepositoryDockerGroup;
export declare const RepositoryDockerGroup: typeof import("./repositoryDockerGroup").RepositoryDockerGroup;
export { RepositoryDockerHostedArgs, RepositoryDockerHostedState } from "./repositoryDockerHosted";
export type RepositoryDockerHosted = import("./repositoryDockerHosted").RepositoryDockerHosted;
export declare const RepositoryDockerHosted: typeof import("./repositoryDockerHosted").RepositoryDockerHosted;
export { RepositoryDockerProxyArgs, RepositoryDockerProxyState } from "./repositoryDockerProxy";
export type RepositoryDockerProxy = import("./repositoryDockerProxy").RepositoryDockerProxy;
export declare const RepositoryDockerProxy: typeof import("./repositoryDockerProxy").RepositoryDockerProxy;
export { RepositoryGitlfsHostedArgs, RepositoryGitlfsHostedState } from "./repositoryGitlfsHosted";
export type RepositoryGitlfsHosted = import("./repositoryGitlfsHosted").RepositoryGitlfsHosted;
export declare const RepositoryGitlfsHosted: typeof import("./repositoryGitlfsHosted").RepositoryGitlfsHosted;
export { RepositoryGoGroupArgs, RepositoryGoGroupState } from "./repositoryGoGroup";
export type RepositoryGoGroup = import("./repositoryGoGroup").RepositoryGoGroup;
export declare const RepositoryGoGroup: typeof import("./repositoryGoGroup").RepositoryGoGroup;
export { RepositoryGoProxyArgs, RepositoryGoProxyState } from "./repositoryGoProxy";
export type RepositoryGoProxy = import("./repositoryGoProxy").RepositoryGoProxy;
export declare const RepositoryGoProxy: typeof import("./repositoryGoProxy").RepositoryGoProxy;
export { RepositoryHelmHostedArgs, RepositoryHelmHostedState } from "./repositoryHelmHosted";
export type RepositoryHelmHosted = import("./repositoryHelmHosted").RepositoryHelmHosted;
export declare const RepositoryHelmHosted: typeof import("./repositoryHelmHosted").RepositoryHelmHosted;
export { RepositoryHelmProxyArgs, RepositoryHelmProxyState } from "./repositoryHelmProxy";
export type RepositoryHelmProxy = import("./repositoryHelmProxy").RepositoryHelmProxy;
export declare const RepositoryHelmProxy: typeof import("./repositoryHelmProxy").RepositoryHelmProxy;
export { RepositoryMavenGroupArgs, RepositoryMavenGroupState } from "./repositoryMavenGroup";
export type RepositoryMavenGroup = import("./repositoryMavenGroup").RepositoryMavenGroup;
export declare const RepositoryMavenGroup: typeof import("./repositoryMavenGroup").RepositoryMavenGroup;
export { RepositoryMavenHostedArgs, RepositoryMavenHostedState } from "./repositoryMavenHosted";
export type RepositoryMavenHosted = import("./repositoryMavenHosted").RepositoryMavenHosted;
export declare const RepositoryMavenHosted: typeof import("./repositoryMavenHosted").RepositoryMavenHosted;
export { RepositoryMavenProxyArgs, RepositoryMavenProxyState } from "./repositoryMavenProxy";
export type RepositoryMavenProxy = import("./repositoryMavenProxy").RepositoryMavenProxy;
export declare const RepositoryMavenProxy: typeof import("./repositoryMavenProxy").RepositoryMavenProxy;
export { RepositoryNpmGroupArgs, RepositoryNpmGroupState } from "./repositoryNpmGroup";
export type RepositoryNpmGroup = import("./repositoryNpmGroup").RepositoryNpmGroup;
export declare const RepositoryNpmGroup: typeof import("./repositoryNpmGroup").RepositoryNpmGroup;
export { RepositoryNpmHostedArgs, RepositoryNpmHostedState } from "./repositoryNpmHosted";
export type RepositoryNpmHosted = import("./repositoryNpmHosted").RepositoryNpmHosted;
export declare const RepositoryNpmHosted: typeof import("./repositoryNpmHosted").RepositoryNpmHosted;
export { RepositoryNpmProxyArgs, RepositoryNpmProxyState } from "./repositoryNpmProxy";
export type RepositoryNpmProxy = import("./repositoryNpmProxy").RepositoryNpmProxy;
export declare const RepositoryNpmProxy: typeof import("./repositoryNpmProxy").RepositoryNpmProxy;
export { RepositoryNugetGroupArgs, RepositoryNugetGroupState } from "./repositoryNugetGroup";
export type RepositoryNugetGroup = import("./repositoryNugetGroup").RepositoryNugetGroup;
export declare const RepositoryNugetGroup: typeof import("./repositoryNugetGroup").RepositoryNugetGroup;
export { RepositoryNugetHostedArgs, RepositoryNugetHostedState } from "./repositoryNugetHosted";
export type RepositoryNugetHosted = import("./repositoryNugetHosted").RepositoryNugetHosted;
export declare const RepositoryNugetHosted: typeof import("./repositoryNugetHosted").RepositoryNugetHosted;
export { RepositoryNugetProxyArgs, RepositoryNugetProxyState } from "./repositoryNugetProxy";
export type RepositoryNugetProxy = import("./repositoryNugetProxy").RepositoryNugetProxy;
export declare const RepositoryNugetProxy: typeof import("./repositoryNugetProxy").RepositoryNugetProxy;
export { RepositoryP2ProxyArgs, RepositoryP2ProxyState } from "./repositoryP2Proxy";
export type RepositoryP2Proxy = import("./repositoryP2Proxy").RepositoryP2Proxy;
export declare const RepositoryP2Proxy: typeof import("./repositoryP2Proxy").RepositoryP2Proxy;
export { RepositoryPypiGroupArgs, RepositoryPypiGroupState } from "./repositoryPypiGroup";
export type RepositoryPypiGroup = import("./repositoryPypiGroup").RepositoryPypiGroup;
export declare const RepositoryPypiGroup: typeof import("./repositoryPypiGroup").RepositoryPypiGroup;
export { RepositoryPypiHostedArgs, RepositoryPypiHostedState } from "./repositoryPypiHosted";
export type RepositoryPypiHosted = import("./repositoryPypiHosted").RepositoryPypiHosted;
export declare const RepositoryPypiHosted: typeof import("./repositoryPypiHosted").RepositoryPypiHosted;
export { RepositoryPypiProxyArgs, RepositoryPypiProxyState } from "./repositoryPypiProxy";
export type RepositoryPypiProxy = import("./repositoryPypiProxy").RepositoryPypiProxy;
export declare const RepositoryPypiProxy: typeof import("./repositoryPypiProxy").RepositoryPypiProxy;
export { RepositoryRGroupArgs, RepositoryRGroupState } from "./repositoryRGroup";
export type RepositoryRGroup = import("./repositoryRGroup").RepositoryRGroup;
export declare const RepositoryRGroup: typeof import("./repositoryRGroup").RepositoryRGroup;
export { RepositoryRHostedArgs, RepositoryRHostedState } from "./repositoryRHosted";
export type RepositoryRHosted = import("./repositoryRHosted").RepositoryRHosted;
export declare const RepositoryRHosted: typeof import("./repositoryRHosted").RepositoryRHosted;
export { RepositoryRProxyArgs, RepositoryRProxyState } from "./repositoryRProxy";
export type RepositoryRProxy = import("./repositoryRProxy").RepositoryRProxy;
export declare const RepositoryRProxy: typeof import("./repositoryRProxy").RepositoryRProxy;
export { RepositoryRawGroupArgs, RepositoryRawGroupState } from "./repositoryRawGroup";
export type RepositoryRawGroup = import("./repositoryRawGroup").RepositoryRawGroup;
export declare const RepositoryRawGroup: typeof import("./repositoryRawGroup").RepositoryRawGroup;
export { RepositoryRawHostedArgs, RepositoryRawHostedState } from "./repositoryRawHosted";
export type RepositoryRawHosted = import("./repositoryRawHosted").RepositoryRawHosted;
export declare const RepositoryRawHosted: typeof import("./repositoryRawHosted").RepositoryRawHosted;
export { RepositoryRawProxyArgs, RepositoryRawProxyState } from "./repositoryRawProxy";
export type RepositoryRawProxy = import("./repositoryRawProxy").RepositoryRawProxy;
export declare const RepositoryRawProxy: typeof import("./repositoryRawProxy").RepositoryRawProxy;
export { RepositoryRubygemsGroupArgs, RepositoryRubygemsGroupState } from "./repositoryRubygemsGroup";
export type RepositoryRubygemsGroup = import("./repositoryRubygemsGroup").RepositoryRubygemsGroup;
export declare const RepositoryRubygemsGroup: typeof import("./repositoryRubygemsGroup").RepositoryRubygemsGroup;
export { RepositoryRubygemsHostedArgs, RepositoryRubygemsHostedState } from "./repositoryRubygemsHosted";
export type RepositoryRubygemsHosted = import("./repositoryRubygemsHosted").RepositoryRubygemsHosted;
export declare const RepositoryRubygemsHosted: typeof import("./repositoryRubygemsHosted").RepositoryRubygemsHosted;
export { RepositoryRubygemsProxyArgs, RepositoryRubygemsProxyState } from "./repositoryRubygemsProxy";
export type RepositoryRubygemsProxy = import("./repositoryRubygemsProxy").RepositoryRubygemsProxy;
export declare const RepositoryRubygemsProxy: typeof import("./repositoryRubygemsProxy").RepositoryRubygemsProxy;
export { RepositoryYumGroupArgs, RepositoryYumGroupState } from "./repositoryYumGroup";
export type RepositoryYumGroup = import("./repositoryYumGroup").RepositoryYumGroup;
export declare const RepositoryYumGroup: typeof import("./repositoryYumGroup").RepositoryYumGroup;
export { RepositoryYumHostedArgs, RepositoryYumHostedState } from "./repositoryYumHosted";
export type RepositoryYumHosted = import("./repositoryYumHosted").RepositoryYumHosted;
export declare const RepositoryYumHosted: typeof import("./repositoryYumHosted").RepositoryYumHosted;
export { RepositoryYumProxyArgs, RepositoryYumProxyState } from "./repositoryYumProxy";
export type RepositoryYumProxy = import("./repositoryYumProxy").RepositoryYumProxy;
export declare const RepositoryYumProxy: typeof import("./repositoryYumProxy").RepositoryYumProxy;
export { RoutingRuleArgs, RoutingRuleState } from "./routingRule";
export type RoutingRule = import("./routingRule").RoutingRule;
export declare const RoutingRule: typeof import("./routingRule").RoutingRule;
export { ScriptArgs, ScriptState } from "./script";
export type Script = import("./script").Script;
export declare const Script: typeof import("./script").Script;
export { SecurityAnonymousArgs, SecurityAnonymousState } from "./securityAnonymous";
export type SecurityAnonymous = import("./securityAnonymous").SecurityAnonymous;
export declare const SecurityAnonymous: typeof import("./securityAnonymous").SecurityAnonymous;
export { SecurityContentSelectorArgs, SecurityContentSelectorState } from "./securityContentSelector";
export type SecurityContentSelector = import("./securityContentSelector").SecurityContentSelector;
export declare const SecurityContentSelector: typeof import("./securityContentSelector").SecurityContentSelector;
export { SecurityLdapArgs, SecurityLdapState } from "./securityLdap";
export type SecurityLdap = import("./securityLdap").SecurityLdap;
export declare const SecurityLdap: typeof import("./securityLdap").SecurityLdap;
export { SecurityLdapOrderArgs, SecurityLdapOrderState } from "./securityLdapOrder";
export type SecurityLdapOrder = import("./securityLdapOrder").SecurityLdapOrder;
export declare const SecurityLdapOrder: typeof import("./securityLdapOrder").SecurityLdapOrder;
export { SecurityRealmsArgs, SecurityRealmsState } from "./securityRealms";
export type SecurityRealms = import("./securityRealms").SecurityRealms;
export declare const SecurityRealms: typeof import("./securityRealms").SecurityRealms;
export { SecurityRoleArgs, SecurityRoleState } from "./securityRole";
export type SecurityRole = import("./securityRole").SecurityRole;
export declare const SecurityRole: typeof import("./securityRole").SecurityRole;
export { SecuritySamlArgs, SecuritySamlState } from "./securitySaml";
export type SecuritySaml = import("./securitySaml").SecuritySaml;
export declare const SecuritySaml: typeof import("./securitySaml").SecuritySaml;
export { SecuritySslTruststoreArgs, SecuritySslTruststoreState } from "./securitySslTruststore";
export type SecuritySslTruststore = import("./securitySslTruststore").SecuritySslTruststore;
export declare const SecuritySslTruststore: typeof import("./securitySslTruststore").SecuritySslTruststore;
export { SecurityUserArgs, SecurityUserState } from "./securityUser";
export type SecurityUser = import("./securityUser").SecurityUser;
export declare const SecurityUser: typeof import("./securityUser").SecurityUser;
export { SecurityUserTokenArgs, SecurityUserTokenState } from "./securityUserToken";
export type SecurityUserToken = import("./securityUserToken").SecurityUserToken;
export declare const SecurityUserToken: typeof import("./securityUserToken").SecurityUserToken;
import * as config from "./config";
import * as types from "./types";
export { config, types, };
