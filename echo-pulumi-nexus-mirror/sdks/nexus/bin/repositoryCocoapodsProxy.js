"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.RepositoryCocoapodsProxy = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
class RepositoryCocoapodsProxy extends pulumi.CustomResource {
    /**
     * Get an existing RepositoryCocoapodsProxy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new RepositoryCocoapodsProxy(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of RepositoryCocoapodsProxy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RepositoryCocoapodsProxy.__pulumiType;
    }
    constructor(name, argsOrState, opts) {
        let resourceInputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            resourceInputs["cleanups"] = state ? state.cleanups : undefined;
            resourceInputs["httpClient"] = state ? state.httpClient : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["negativeCache"] = state ? state.negativeCache : undefined;
            resourceInputs["online"] = state ? state.online : undefined;
            resourceInputs["proxy"] = state ? state.proxy : undefined;
            resourceInputs["routingRule"] = state ? state.routingRule : undefined;
            resourceInputs["storage"] = state ? state.storage : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.httpClient === undefined) && !opts.urn) {
                throw new Error("Missing required property 'httpClient'");
            }
            if ((!args || args.negativeCache === undefined) && !opts.urn) {
                throw new Error("Missing required property 'negativeCache'");
            }
            if ((!args || args.proxy === undefined) && !opts.urn) {
                throw new Error("Missing required property 'proxy'");
            }
            if ((!args || args.storage === undefined) && !opts.urn) {
                throw new Error("Missing required property 'storage'");
            }
            resourceInputs["cleanups"] = args ? args.cleanups : undefined;
            resourceInputs["httpClient"] = args ? args.httpClient : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["negativeCache"] = args ? args.negativeCache : undefined;
            resourceInputs["online"] = args ? args.online : undefined;
            resourceInputs["proxy"] = args ? args.proxy : undefined;
            resourceInputs["routingRule"] = args ? args.routingRule : undefined;
            resourceInputs["storage"] = args ? args.storage : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RepositoryCocoapodsProxy.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}
exports.RepositoryCocoapodsProxy = RepositoryCocoapodsProxy;
/** @internal */
RepositoryCocoapodsProxy.__pulumiType = 'nexus:index/repositoryCocoapodsProxy:RepositoryCocoapodsProxy';
//# sourceMappingURL=repositoryCocoapodsProxy.js.map