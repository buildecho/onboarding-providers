// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class RepositoryRawGroup extends pulumi.CustomResource {
    /**
     * Get an existing RepositoryRawGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RepositoryRawGroupState, opts?: pulumi.CustomResourceOptions): RepositoryRawGroup {
        return new RepositoryRawGroup(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'nexus:index/repositoryRawGroup:RepositoryRawGroup';

    /**
     * Returns true if the given object is an instance of RepositoryRawGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is RepositoryRawGroup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RepositoryRawGroup.__pulumiType;
    }

    /**
     * Configuration for repository group
     */
    public readonly group!: pulumi.Output<outputs.RepositoryRawGroupGroup>;
    /**
     * A unique identifier for this repository
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Whether this repository accepts incoming requests
     */
    public readonly online!: pulumi.Output<boolean | undefined>;
    /**
     * The storage configuration of the repository
     */
    public readonly storage!: pulumi.Output<outputs.RepositoryRawGroupStorage>;

    /**
     * Create a RepositoryRawGroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RepositoryRawGroupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RepositoryRawGroupArgs | RepositoryRawGroupState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as RepositoryRawGroupState | undefined;
            resourceInputs["group"] = state ? state.group : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["online"] = state ? state.online : undefined;
            resourceInputs["storage"] = state ? state.storage : undefined;
        } else {
            const args = argsOrState as RepositoryRawGroupArgs | undefined;
            if ((!args || args.group === undefined) && !opts.urn) {
                throw new Error("Missing required property 'group'");
            }
            if ((!args || args.storage === undefined) && !opts.urn) {
                throw new Error("Missing required property 'storage'");
            }
            resourceInputs["group"] = args ? args.group : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["online"] = args ? args.online : undefined;
            resourceInputs["storage"] = args ? args.storage : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(RepositoryRawGroup.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering RepositoryRawGroup resources.
 */
export interface RepositoryRawGroupState {
    /**
     * Configuration for repository group
     */
    group?: pulumi.Input<inputs.RepositoryRawGroupGroup>;
    /**
     * A unique identifier for this repository
     */
    name?: pulumi.Input<string>;
    /**
     * Whether this repository accepts incoming requests
     */
    online?: pulumi.Input<boolean>;
    /**
     * The storage configuration of the repository
     */
    storage?: pulumi.Input<inputs.RepositoryRawGroupStorage>;
}

/**
 * The set of arguments for constructing a RepositoryRawGroup resource.
 */
export interface RepositoryRawGroupArgs {
    /**
     * Configuration for repository group
     */
    group: pulumi.Input<inputs.RepositoryRawGroupGroup>;
    /**
     * A unique identifier for this repository
     */
    name?: pulumi.Input<string>;
    /**
     * Whether this repository accepts incoming requests
     */
    online?: pulumi.Input<boolean>;
    /**
     * The storage configuration of the repository
     */
    storage: pulumi.Input<inputs.RepositoryRawGroupStorage>;
}
