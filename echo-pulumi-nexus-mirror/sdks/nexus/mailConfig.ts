// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class MailConfig extends pulumi.CustomResource {
    /**
     * Get an existing MailConfig resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: MailConfigState, opts?: pulumi.CustomResourceOptions): MailConfig {
        return new MailConfig(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'nexus:index/mailConfig:MailConfig';

    /**
     * Returns true if the given object is an instance of MailConfig.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MailConfig {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MailConfig.__pulumiType;
    }

    /**
     * Whether the config is enabled or not
     */
    public readonly enabled!: pulumi.Output<boolean | undefined>;
    /**
     * fromAddress
     */
    public readonly fromAddress!: pulumi.Output<string>;
    /**
     * hostname
     */
    public readonly host!: pulumi.Output<string>;
    /**
     * SSL on connect enabled
     */
    public readonly nexusTrustStoreEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * Password
     */
    public readonly password!: pulumi.Output<string | undefined>;
    /**
     * port
     */
    public readonly port!: pulumi.Output<number>;
    /**
     * SSL on connect enabled
     */
    public readonly sslOnConnectEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * SSL on connect enabled
     */
    public readonly sslServerIdentityCheckEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * Star TLS Enabled
     */
    public readonly startTlsEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * Star TLS required
     */
    public readonly startTlsRequired!: pulumi.Output<boolean | undefined>;
    /**
     * Subject prefix
     */
    public readonly subjectPrefix!: pulumi.Output<string | undefined>;
    /**
     * Username
     */
    public readonly username!: pulumi.Output<string | undefined>;

    /**
     * Create a MailConfig resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MailConfigArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MailConfigArgs | MailConfigState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as MailConfigState | undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["fromAddress"] = state ? state.fromAddress : undefined;
            resourceInputs["host"] = state ? state.host : undefined;
            resourceInputs["nexusTrustStoreEnabled"] = state ? state.nexusTrustStoreEnabled : undefined;
            resourceInputs["password"] = state ? state.password : undefined;
            resourceInputs["port"] = state ? state.port : undefined;
            resourceInputs["sslOnConnectEnabled"] = state ? state.sslOnConnectEnabled : undefined;
            resourceInputs["sslServerIdentityCheckEnabled"] = state ? state.sslServerIdentityCheckEnabled : undefined;
            resourceInputs["startTlsEnabled"] = state ? state.startTlsEnabled : undefined;
            resourceInputs["startTlsRequired"] = state ? state.startTlsRequired : undefined;
            resourceInputs["subjectPrefix"] = state ? state.subjectPrefix : undefined;
            resourceInputs["username"] = state ? state.username : undefined;
        } else {
            const args = argsOrState as MailConfigArgs | undefined;
            if ((!args || args.fromAddress === undefined) && !opts.urn) {
                throw new Error("Missing required property 'fromAddress'");
            }
            if ((!args || args.host === undefined) && !opts.urn) {
                throw new Error("Missing required property 'host'");
            }
            if ((!args || args.port === undefined) && !opts.urn) {
                throw new Error("Missing required property 'port'");
            }
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["fromAddress"] = args ? args.fromAddress : undefined;
            resourceInputs["host"] = args ? args.host : undefined;
            resourceInputs["nexusTrustStoreEnabled"] = args ? args.nexusTrustStoreEnabled : undefined;
            resourceInputs["password"] = args?.password ? pulumi.secret(args.password) : undefined;
            resourceInputs["port"] = args ? args.port : undefined;
            resourceInputs["sslOnConnectEnabled"] = args ? args.sslOnConnectEnabled : undefined;
            resourceInputs["sslServerIdentityCheckEnabled"] = args ? args.sslServerIdentityCheckEnabled : undefined;
            resourceInputs["startTlsEnabled"] = args ? args.startTlsEnabled : undefined;
            resourceInputs["startTlsRequired"] = args ? args.startTlsRequired : undefined;
            resourceInputs["subjectPrefix"] = args ? args.subjectPrefix : undefined;
            resourceInputs["username"] = args ? args.username : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["password"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(MailConfig.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering MailConfig resources.
 */
export interface MailConfigState {
    /**
     * Whether the config is enabled or not
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * fromAddress
     */
    fromAddress?: pulumi.Input<string>;
    /**
     * hostname
     */
    host?: pulumi.Input<string>;
    /**
     * SSL on connect enabled
     */
    nexusTrustStoreEnabled?: pulumi.Input<boolean>;
    /**
     * Password
     */
    password?: pulumi.Input<string>;
    /**
     * port
     */
    port?: pulumi.Input<number>;
    /**
     * SSL on connect enabled
     */
    sslOnConnectEnabled?: pulumi.Input<boolean>;
    /**
     * SSL on connect enabled
     */
    sslServerIdentityCheckEnabled?: pulumi.Input<boolean>;
    /**
     * Star TLS Enabled
     */
    startTlsEnabled?: pulumi.Input<boolean>;
    /**
     * Star TLS required
     */
    startTlsRequired?: pulumi.Input<boolean>;
    /**
     * Subject prefix
     */
    subjectPrefix?: pulumi.Input<string>;
    /**
     * Username
     */
    username?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a MailConfig resource.
 */
export interface MailConfigArgs {
    /**
     * Whether the config is enabled or not
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * fromAddress
     */
    fromAddress: pulumi.Input<string>;
    /**
     * hostname
     */
    host: pulumi.Input<string>;
    /**
     * SSL on connect enabled
     */
    nexusTrustStoreEnabled?: pulumi.Input<boolean>;
    /**
     * Password
     */
    password?: pulumi.Input<string>;
    /**
     * port
     */
    port: pulumi.Input<number>;
    /**
     * SSL on connect enabled
     */
    sslOnConnectEnabled?: pulumi.Input<boolean>;
    /**
     * SSL on connect enabled
     */
    sslServerIdentityCheckEnabled?: pulumi.Input<boolean>;
    /**
     * Star TLS Enabled
     */
    startTlsEnabled?: pulumi.Input<boolean>;
    /**
     * Star TLS required
     */
    startTlsRequired?: pulumi.Input<boolean>;
    /**
     * Subject prefix
     */
    subjectPrefix?: pulumi.Input<string>;
    /**
     * Username
     */
    username?: pulumi.Input<string>;
}
