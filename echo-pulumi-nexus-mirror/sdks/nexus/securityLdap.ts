// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class SecurityLdap extends pulumi.CustomResource {
    /**
     * Get an existing SecurityLdap resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SecurityLdapState, opts?: pulumi.CustomResourceOptions): SecurityLdap {
        return new SecurityLdap(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'nexus:index/securityLdap:SecurityLdap';

    /**
     * Returns true if the given object is an instance of SecurityLdap.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is SecurityLdap {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SecurityLdap.__pulumiType;
    }

    /**
     * The password to bind with. Required if authScheme other than none.
     */
    public readonly authPassword!: pulumi.Output<string | undefined>;
    /**
     * The SASL realm to bind to. Required if authScheme is CRAM_MD5 or DIGEST_MD5
     */
    public readonly authRealm!: pulumi.Output<string | undefined>;
    /**
     * Authentication scheme used for connecting to LDAP server
     */
    public readonly authSchema!: pulumi.Output<string>;
    /**
     * This must be a fully qualified username if simple authentication is used. Required if authScheme other than none.
     */
    public readonly authUsername!: pulumi.Output<string>;
    /**
     * How long to wait before retrying
     */
    public readonly connectionRetryDelaySeconds!: pulumi.Output<number>;
    /**
     * How long to wait before timeout
     */
    public readonly connectionTimeoutSeconds!: pulumi.Output<number>;
    /**
     * The relative DN where group objects are found (e.g. ou=Group). This value will have the Search base DN value appended to
     * form the full Group search base DN.
     */
    public readonly groupBaseDn!: pulumi.Output<string | undefined>;
    /**
     * This field specifies the attribute of the Object class that defines the Group ID. Required if groupType is static
     */
    public readonly groupIdAttribute!: pulumi.Output<string | undefined>;
    /**
     * LDAP attribute containing the usernames for the group. Required if groupType is static
     */
    public readonly groupMemberAttribute!: pulumi.Output<string | undefined>;
    /**
     * The format of user ID stored in the group member attribute. Required if groupType is static
     */
    public readonly groupMemberFormat!: pulumi.Output<string | undefined>;
    /**
     * LDAP class for group objects. Required if groupType is static
     */
    public readonly groupObjectClass!: pulumi.Output<string | undefined>;
    /**
     * Are groups located in structures below the group base DN
     */
    public readonly groupSubtree!: pulumi.Output<boolean | undefined>;
    /**
     * Defines a type of groups used: static (a group contains a list of users) or dynamic (a user contains a list of groups).
     * Required if ldapGroupsAsRoles is true.
     */
    public readonly groupType!: pulumi.Output<string>;
    /**
     * LDAP server connection hostname
     */
    public readonly host!: pulumi.Output<string>;
    /**
     * Denotes whether LDAP assigned roles are used as Nexus Repository Manager roles
     */
    public readonly ldapGroupsAsRoles!: pulumi.Output<boolean | undefined>;
    /**
     * How many retry attempts
     */
    public readonly maxIncidentCount!: pulumi.Output<number>;
    /**
     * LDAP server name
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * LDAP server connection port to use
     */
    public readonly port!: pulumi.Output<number>;
    /**
     * LDAP server connection Protocol to use
     */
    public readonly protocol!: pulumi.Output<string>;
    /**
     * LDAP location to be added to the connection URL
     */
    public readonly searchBase!: pulumi.Output<string>;
    /**
     * Whether to use certificates stored in Nexus Repository Manager's truststore
     */
    public readonly useTrustStore!: pulumi.Output<boolean | undefined>;
    /**
     * The relative DN where user objects are found (e.g. ou=people). This value will have the Search base DN value appended to
     * form the full User search base DN.
     */
    public readonly userBaseDn!: pulumi.Output<string | undefined>;
    /**
     * This is used to find an email address given the user ID
     */
    public readonly userEmailAddressAttribute!: pulumi.Output<string | undefined>;
    /**
     * This is used to find a user given its user ID
     */
    public readonly userIdAttribute!: pulumi.Output<string | undefined>;
    /**
     * LDAP search filter to limit user search
     */
    public readonly userLdapFilter!: pulumi.Output<string | undefined>;
    /**
     * Set this to the attribute used to store the attribute which holds groups DN in the user object. Required if groupType is
     * dynamic
     */
    public readonly userMemberOfAttribute!: pulumi.Output<string | undefined>;
    /**
     * LDAP class for user objects
     */
    public readonly userObjectClass!: pulumi.Output<string | undefined>;
    /**
     * If this field is blank the user will be authenticated against a bind with the LDAP server
     */
    public readonly userPasswordAttribute!: pulumi.Output<string | undefined>;
    /**
     * This is used to find a real name given the user ID
     */
    public readonly userRealNameAttribute!: pulumi.Output<string | undefined>;
    /**
     * Are users located in structures below the user base DN?
     */
    public readonly userSubtree!: pulumi.Output<boolean | undefined>;

    /**
     * Create a SecurityLdap resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SecurityLdapArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: SecurityLdapArgs | SecurityLdapState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as SecurityLdapState | undefined;
            resourceInputs["authPassword"] = state ? state.authPassword : undefined;
            resourceInputs["authRealm"] = state ? state.authRealm : undefined;
            resourceInputs["authSchema"] = state ? state.authSchema : undefined;
            resourceInputs["authUsername"] = state ? state.authUsername : undefined;
            resourceInputs["connectionRetryDelaySeconds"] = state ? state.connectionRetryDelaySeconds : undefined;
            resourceInputs["connectionTimeoutSeconds"] = state ? state.connectionTimeoutSeconds : undefined;
            resourceInputs["groupBaseDn"] = state ? state.groupBaseDn : undefined;
            resourceInputs["groupIdAttribute"] = state ? state.groupIdAttribute : undefined;
            resourceInputs["groupMemberAttribute"] = state ? state.groupMemberAttribute : undefined;
            resourceInputs["groupMemberFormat"] = state ? state.groupMemberFormat : undefined;
            resourceInputs["groupObjectClass"] = state ? state.groupObjectClass : undefined;
            resourceInputs["groupSubtree"] = state ? state.groupSubtree : undefined;
            resourceInputs["groupType"] = state ? state.groupType : undefined;
            resourceInputs["host"] = state ? state.host : undefined;
            resourceInputs["ldapGroupsAsRoles"] = state ? state.ldapGroupsAsRoles : undefined;
            resourceInputs["maxIncidentCount"] = state ? state.maxIncidentCount : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["port"] = state ? state.port : undefined;
            resourceInputs["protocol"] = state ? state.protocol : undefined;
            resourceInputs["searchBase"] = state ? state.searchBase : undefined;
            resourceInputs["useTrustStore"] = state ? state.useTrustStore : undefined;
            resourceInputs["userBaseDn"] = state ? state.userBaseDn : undefined;
            resourceInputs["userEmailAddressAttribute"] = state ? state.userEmailAddressAttribute : undefined;
            resourceInputs["userIdAttribute"] = state ? state.userIdAttribute : undefined;
            resourceInputs["userLdapFilter"] = state ? state.userLdapFilter : undefined;
            resourceInputs["userMemberOfAttribute"] = state ? state.userMemberOfAttribute : undefined;
            resourceInputs["userObjectClass"] = state ? state.userObjectClass : undefined;
            resourceInputs["userPasswordAttribute"] = state ? state.userPasswordAttribute : undefined;
            resourceInputs["userRealNameAttribute"] = state ? state.userRealNameAttribute : undefined;
            resourceInputs["userSubtree"] = state ? state.userSubtree : undefined;
        } else {
            const args = argsOrState as SecurityLdapArgs | undefined;
            if ((!args || args.authSchema === undefined) && !opts.urn) {
                throw new Error("Missing required property 'authSchema'");
            }
            if ((!args || args.authUsername === undefined) && !opts.urn) {
                throw new Error("Missing required property 'authUsername'");
            }
            if ((!args || args.connectionRetryDelaySeconds === undefined) && !opts.urn) {
                throw new Error("Missing required property 'connectionRetryDelaySeconds'");
            }
            if ((!args || args.connectionTimeoutSeconds === undefined) && !opts.urn) {
                throw new Error("Missing required property 'connectionTimeoutSeconds'");
            }
            if ((!args || args.groupType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'groupType'");
            }
            if ((!args || args.host === undefined) && !opts.urn) {
                throw new Error("Missing required property 'host'");
            }
            if ((!args || args.maxIncidentCount === undefined) && !opts.urn) {
                throw new Error("Missing required property 'maxIncidentCount'");
            }
            if ((!args || args.port === undefined) && !opts.urn) {
                throw new Error("Missing required property 'port'");
            }
            if ((!args || args.protocol === undefined) && !opts.urn) {
                throw new Error("Missing required property 'protocol'");
            }
            if ((!args || args.searchBase === undefined) && !opts.urn) {
                throw new Error("Missing required property 'searchBase'");
            }
            resourceInputs["authPassword"] = args?.authPassword ? pulumi.secret(args.authPassword) : undefined;
            resourceInputs["authRealm"] = args ? args.authRealm : undefined;
            resourceInputs["authSchema"] = args ? args.authSchema : undefined;
            resourceInputs["authUsername"] = args ? args.authUsername : undefined;
            resourceInputs["connectionRetryDelaySeconds"] = args ? args.connectionRetryDelaySeconds : undefined;
            resourceInputs["connectionTimeoutSeconds"] = args ? args.connectionTimeoutSeconds : undefined;
            resourceInputs["groupBaseDn"] = args ? args.groupBaseDn : undefined;
            resourceInputs["groupIdAttribute"] = args ? args.groupIdAttribute : undefined;
            resourceInputs["groupMemberAttribute"] = args ? args.groupMemberAttribute : undefined;
            resourceInputs["groupMemberFormat"] = args ? args.groupMemberFormat : undefined;
            resourceInputs["groupObjectClass"] = args ? args.groupObjectClass : undefined;
            resourceInputs["groupSubtree"] = args ? args.groupSubtree : undefined;
            resourceInputs["groupType"] = args ? args.groupType : undefined;
            resourceInputs["host"] = args ? args.host : undefined;
            resourceInputs["ldapGroupsAsRoles"] = args ? args.ldapGroupsAsRoles : undefined;
            resourceInputs["maxIncidentCount"] = args ? args.maxIncidentCount : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["port"] = args ? args.port : undefined;
            resourceInputs["protocol"] = args ? args.protocol : undefined;
            resourceInputs["searchBase"] = args ? args.searchBase : undefined;
            resourceInputs["useTrustStore"] = args ? args.useTrustStore : undefined;
            resourceInputs["userBaseDn"] = args ? args.userBaseDn : undefined;
            resourceInputs["userEmailAddressAttribute"] = args ? args.userEmailAddressAttribute : undefined;
            resourceInputs["userIdAttribute"] = args ? args.userIdAttribute : undefined;
            resourceInputs["userLdapFilter"] = args ? args.userLdapFilter : undefined;
            resourceInputs["userMemberOfAttribute"] = args ? args.userMemberOfAttribute : undefined;
            resourceInputs["userObjectClass"] = args ? args.userObjectClass : undefined;
            resourceInputs["userPasswordAttribute"] = args ? args.userPasswordAttribute : undefined;
            resourceInputs["userRealNameAttribute"] = args ? args.userRealNameAttribute : undefined;
            resourceInputs["userSubtree"] = args ? args.userSubtree : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["authPassword"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(SecurityLdap.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering SecurityLdap resources.
 */
export interface SecurityLdapState {
    /**
     * The password to bind with. Required if authScheme other than none.
     */
    authPassword?: pulumi.Input<string>;
    /**
     * The SASL realm to bind to. Required if authScheme is CRAM_MD5 or DIGEST_MD5
     */
    authRealm?: pulumi.Input<string>;
    /**
     * Authentication scheme used for connecting to LDAP server
     */
    authSchema?: pulumi.Input<string>;
    /**
     * This must be a fully qualified username if simple authentication is used. Required if authScheme other than none.
     */
    authUsername?: pulumi.Input<string>;
    /**
     * How long to wait before retrying
     */
    connectionRetryDelaySeconds?: pulumi.Input<number>;
    /**
     * How long to wait before timeout
     */
    connectionTimeoutSeconds?: pulumi.Input<number>;
    /**
     * The relative DN where group objects are found (e.g. ou=Group). This value will have the Search base DN value appended to
     * form the full Group search base DN.
     */
    groupBaseDn?: pulumi.Input<string>;
    /**
     * This field specifies the attribute of the Object class that defines the Group ID. Required if groupType is static
     */
    groupIdAttribute?: pulumi.Input<string>;
    /**
     * LDAP attribute containing the usernames for the group. Required if groupType is static
     */
    groupMemberAttribute?: pulumi.Input<string>;
    /**
     * The format of user ID stored in the group member attribute. Required if groupType is static
     */
    groupMemberFormat?: pulumi.Input<string>;
    /**
     * LDAP class for group objects. Required if groupType is static
     */
    groupObjectClass?: pulumi.Input<string>;
    /**
     * Are groups located in structures below the group base DN
     */
    groupSubtree?: pulumi.Input<boolean>;
    /**
     * Defines a type of groups used: static (a group contains a list of users) or dynamic (a user contains a list of groups).
     * Required if ldapGroupsAsRoles is true.
     */
    groupType?: pulumi.Input<string>;
    /**
     * LDAP server connection hostname
     */
    host?: pulumi.Input<string>;
    /**
     * Denotes whether LDAP assigned roles are used as Nexus Repository Manager roles
     */
    ldapGroupsAsRoles?: pulumi.Input<boolean>;
    /**
     * How many retry attempts
     */
    maxIncidentCount?: pulumi.Input<number>;
    /**
     * LDAP server name
     */
    name?: pulumi.Input<string>;
    /**
     * LDAP server connection port to use
     */
    port?: pulumi.Input<number>;
    /**
     * LDAP server connection Protocol to use
     */
    protocol?: pulumi.Input<string>;
    /**
     * LDAP location to be added to the connection URL
     */
    searchBase?: pulumi.Input<string>;
    /**
     * Whether to use certificates stored in Nexus Repository Manager's truststore
     */
    useTrustStore?: pulumi.Input<boolean>;
    /**
     * The relative DN where user objects are found (e.g. ou=people). This value will have the Search base DN value appended to
     * form the full User search base DN.
     */
    userBaseDn?: pulumi.Input<string>;
    /**
     * This is used to find an email address given the user ID
     */
    userEmailAddressAttribute?: pulumi.Input<string>;
    /**
     * This is used to find a user given its user ID
     */
    userIdAttribute?: pulumi.Input<string>;
    /**
     * LDAP search filter to limit user search
     */
    userLdapFilter?: pulumi.Input<string>;
    /**
     * Set this to the attribute used to store the attribute which holds groups DN in the user object. Required if groupType is
     * dynamic
     */
    userMemberOfAttribute?: pulumi.Input<string>;
    /**
     * LDAP class for user objects
     */
    userObjectClass?: pulumi.Input<string>;
    /**
     * If this field is blank the user will be authenticated against a bind with the LDAP server
     */
    userPasswordAttribute?: pulumi.Input<string>;
    /**
     * This is used to find a real name given the user ID
     */
    userRealNameAttribute?: pulumi.Input<string>;
    /**
     * Are users located in structures below the user base DN?
     */
    userSubtree?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a SecurityLdap resource.
 */
export interface SecurityLdapArgs {
    /**
     * The password to bind with. Required if authScheme other than none.
     */
    authPassword?: pulumi.Input<string>;
    /**
     * The SASL realm to bind to. Required if authScheme is CRAM_MD5 or DIGEST_MD5
     */
    authRealm?: pulumi.Input<string>;
    /**
     * Authentication scheme used for connecting to LDAP server
     */
    authSchema: pulumi.Input<string>;
    /**
     * This must be a fully qualified username if simple authentication is used. Required if authScheme other than none.
     */
    authUsername: pulumi.Input<string>;
    /**
     * How long to wait before retrying
     */
    connectionRetryDelaySeconds: pulumi.Input<number>;
    /**
     * How long to wait before timeout
     */
    connectionTimeoutSeconds: pulumi.Input<number>;
    /**
     * The relative DN where group objects are found (e.g. ou=Group). This value will have the Search base DN value appended to
     * form the full Group search base DN.
     */
    groupBaseDn?: pulumi.Input<string>;
    /**
     * This field specifies the attribute of the Object class that defines the Group ID. Required if groupType is static
     */
    groupIdAttribute?: pulumi.Input<string>;
    /**
     * LDAP attribute containing the usernames for the group. Required if groupType is static
     */
    groupMemberAttribute?: pulumi.Input<string>;
    /**
     * The format of user ID stored in the group member attribute. Required if groupType is static
     */
    groupMemberFormat?: pulumi.Input<string>;
    /**
     * LDAP class for group objects. Required if groupType is static
     */
    groupObjectClass?: pulumi.Input<string>;
    /**
     * Are groups located in structures below the group base DN
     */
    groupSubtree?: pulumi.Input<boolean>;
    /**
     * Defines a type of groups used: static (a group contains a list of users) or dynamic (a user contains a list of groups).
     * Required if ldapGroupsAsRoles is true.
     */
    groupType: pulumi.Input<string>;
    /**
     * LDAP server connection hostname
     */
    host: pulumi.Input<string>;
    /**
     * Denotes whether LDAP assigned roles are used as Nexus Repository Manager roles
     */
    ldapGroupsAsRoles?: pulumi.Input<boolean>;
    /**
     * How many retry attempts
     */
    maxIncidentCount: pulumi.Input<number>;
    /**
     * LDAP server name
     */
    name?: pulumi.Input<string>;
    /**
     * LDAP server connection port to use
     */
    port: pulumi.Input<number>;
    /**
     * LDAP server connection Protocol to use
     */
    protocol: pulumi.Input<string>;
    /**
     * LDAP location to be added to the connection URL
     */
    searchBase: pulumi.Input<string>;
    /**
     * Whether to use certificates stored in Nexus Repository Manager's truststore
     */
    useTrustStore?: pulumi.Input<boolean>;
    /**
     * The relative DN where user objects are found (e.g. ou=people). This value will have the Search base DN value appended to
     * form the full User search base DN.
     */
    userBaseDn?: pulumi.Input<string>;
    /**
     * This is used to find an email address given the user ID
     */
    userEmailAddressAttribute?: pulumi.Input<string>;
    /**
     * This is used to find a user given its user ID
     */
    userIdAttribute?: pulumi.Input<string>;
    /**
     * LDAP search filter to limit user search
     */
    userLdapFilter?: pulumi.Input<string>;
    /**
     * Set this to the attribute used to store the attribute which holds groups DN in the user object. Required if groupType is
     * dynamic
     */
    userMemberOfAttribute?: pulumi.Input<string>;
    /**
     * LDAP class for user objects
     */
    userObjectClass?: pulumi.Input<string>;
    /**
     * If this field is blank the user will be authenticated against a bind with the LDAP server
     */
    userPasswordAttribute?: pulumi.Input<string>;
    /**
     * This is used to find a real name given the user ID
     */
    userRealNameAttribute?: pulumi.Input<string>;
    /**
     * Are users located in structures below the user base DN?
     */
    userSubtree?: pulumi.Input<boolean>;
}
