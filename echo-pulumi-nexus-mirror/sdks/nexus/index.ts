// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { BlobstoreAzureArgs, BlobstoreAzureState } from "./blobstoreAzure";
export type BlobstoreAzure = import("./blobstoreAzure").BlobstoreAzure;
export const BlobstoreAzure: typeof import("./blobstoreAzure").BlobstoreAzure = null as any;
utilities.lazyLoad(exports, ["BlobstoreAzure"], () => require("./blobstoreAzure"));

export { BlobstoreFileArgs, BlobstoreFileState } from "./blobstoreFile";
export type BlobstoreFile = import("./blobstoreFile").BlobstoreFile;
export const BlobstoreFile: typeof import("./blobstoreFile").BlobstoreFile = null as any;
utilities.lazyLoad(exports, ["BlobstoreFile"], () => require("./blobstoreFile"));

export { BlobstoreGroupArgs, BlobstoreGroupState } from "./blobstoreGroup";
export type BlobstoreGroup = import("./blobstoreGroup").BlobstoreGroup;
export const BlobstoreGroup: typeof import("./blobstoreGroup").BlobstoreGroup = null as any;
utilities.lazyLoad(exports, ["BlobstoreGroup"], () => require("./blobstoreGroup"));

export { BlobstoreS3Args, BlobstoreS3State } from "./blobstoreS3";
export type BlobstoreS3 = import("./blobstoreS3").BlobstoreS3;
export const BlobstoreS3: typeof import("./blobstoreS3").BlobstoreS3 = null as any;
utilities.lazyLoad(exports, ["BlobstoreS3"], () => require("./blobstoreS3"));

export { GetBlobstoreAzureArgs, GetBlobstoreAzureResult, GetBlobstoreAzureOutputArgs } from "./getBlobstoreAzure";
export const getBlobstoreAzure: typeof import("./getBlobstoreAzure").getBlobstoreAzure = null as any;
export const getBlobstoreAzureOutput: typeof import("./getBlobstoreAzure").getBlobstoreAzureOutput = null as any;
utilities.lazyLoad(exports, ["getBlobstoreAzure","getBlobstoreAzureOutput"], () => require("./getBlobstoreAzure"));

export { GetBlobstoreFileArgs, GetBlobstoreFileResult, GetBlobstoreFileOutputArgs } from "./getBlobstoreFile";
export const getBlobstoreFile: typeof import("./getBlobstoreFile").getBlobstoreFile = null as any;
export const getBlobstoreFileOutput: typeof import("./getBlobstoreFile").getBlobstoreFileOutput = null as any;
utilities.lazyLoad(exports, ["getBlobstoreFile","getBlobstoreFileOutput"], () => require("./getBlobstoreFile"));

export { GetBlobstoreGroupArgs, GetBlobstoreGroupResult, GetBlobstoreGroupOutputArgs } from "./getBlobstoreGroup";
export const getBlobstoreGroup: typeof import("./getBlobstoreGroup").getBlobstoreGroup = null as any;
export const getBlobstoreGroupOutput: typeof import("./getBlobstoreGroup").getBlobstoreGroupOutput = null as any;
utilities.lazyLoad(exports, ["getBlobstoreGroup","getBlobstoreGroupOutput"], () => require("./getBlobstoreGroup"));

export { GetBlobstoreListResult } from "./getBlobstoreList";
export const getBlobstoreList: typeof import("./getBlobstoreList").getBlobstoreList = null as any;
export const getBlobstoreListOutput: typeof import("./getBlobstoreList").getBlobstoreListOutput = null as any;
utilities.lazyLoad(exports, ["getBlobstoreList","getBlobstoreListOutput"], () => require("./getBlobstoreList"));

export { GetBlobstoreS3Args, GetBlobstoreS3Result, GetBlobstoreS3OutputArgs } from "./getBlobstoreS3";
export const getBlobstoreS3: typeof import("./getBlobstoreS3").getBlobstoreS3 = null as any;
export const getBlobstoreS3Output: typeof import("./getBlobstoreS3").getBlobstoreS3Output = null as any;
utilities.lazyLoad(exports, ["getBlobstoreS3","getBlobstoreS3Output"], () => require("./getBlobstoreS3"));

export { GetMailConfigResult } from "./getMailConfig";
export const getMailConfig: typeof import("./getMailConfig").getMailConfig = null as any;
export const getMailConfigOutput: typeof import("./getMailConfig").getMailConfigOutput = null as any;
utilities.lazyLoad(exports, ["getMailConfig","getMailConfigOutput"], () => require("./getMailConfig"));

export { GetPrivilegeApplicationArgs, GetPrivilegeApplicationResult, GetPrivilegeApplicationOutputArgs } from "./getPrivilegeApplication";
export const getPrivilegeApplication: typeof import("./getPrivilegeApplication").getPrivilegeApplication = null as any;
export const getPrivilegeApplicationOutput: typeof import("./getPrivilegeApplication").getPrivilegeApplicationOutput = null as any;
utilities.lazyLoad(exports, ["getPrivilegeApplication","getPrivilegeApplicationOutput"], () => require("./getPrivilegeApplication"));

export { GetPrivilegeRepositoryAdminArgs, GetPrivilegeRepositoryAdminResult, GetPrivilegeRepositoryAdminOutputArgs } from "./getPrivilegeRepositoryAdmin";
export const getPrivilegeRepositoryAdmin: typeof import("./getPrivilegeRepositoryAdmin").getPrivilegeRepositoryAdmin = null as any;
export const getPrivilegeRepositoryAdminOutput: typeof import("./getPrivilegeRepositoryAdmin").getPrivilegeRepositoryAdminOutput = null as any;
utilities.lazyLoad(exports, ["getPrivilegeRepositoryAdmin","getPrivilegeRepositoryAdminOutput"], () => require("./getPrivilegeRepositoryAdmin"));

export { GetPrivilegeRepositoryContentSelectorArgs, GetPrivilegeRepositoryContentSelectorResult, GetPrivilegeRepositoryContentSelectorOutputArgs } from "./getPrivilegeRepositoryContentSelector";
export const getPrivilegeRepositoryContentSelector: typeof import("./getPrivilegeRepositoryContentSelector").getPrivilegeRepositoryContentSelector = null as any;
export const getPrivilegeRepositoryContentSelectorOutput: typeof import("./getPrivilegeRepositoryContentSelector").getPrivilegeRepositoryContentSelectorOutput = null as any;
utilities.lazyLoad(exports, ["getPrivilegeRepositoryContentSelector","getPrivilegeRepositoryContentSelectorOutput"], () => require("./getPrivilegeRepositoryContentSelector"));

export { GetPrivilegeRepositoryViewArgs, GetPrivilegeRepositoryViewResult, GetPrivilegeRepositoryViewOutputArgs } from "./getPrivilegeRepositoryView";
export const getPrivilegeRepositoryView: typeof import("./getPrivilegeRepositoryView").getPrivilegeRepositoryView = null as any;
export const getPrivilegeRepositoryViewOutput: typeof import("./getPrivilegeRepositoryView").getPrivilegeRepositoryViewOutput = null as any;
utilities.lazyLoad(exports, ["getPrivilegeRepositoryView","getPrivilegeRepositoryViewOutput"], () => require("./getPrivilegeRepositoryView"));

export { GetPrivilegeScriptArgs, GetPrivilegeScriptResult, GetPrivilegeScriptOutputArgs } from "./getPrivilegeScript";
export const getPrivilegeScript: typeof import("./getPrivilegeScript").getPrivilegeScript = null as any;
export const getPrivilegeScriptOutput: typeof import("./getPrivilegeScript").getPrivilegeScriptOutput = null as any;
utilities.lazyLoad(exports, ["getPrivilegeScript","getPrivilegeScriptOutput"], () => require("./getPrivilegeScript"));

export { GetPrivilegeWildcardArgs, GetPrivilegeWildcardResult, GetPrivilegeWildcardOutputArgs } from "./getPrivilegeWildcard";
export const getPrivilegeWildcard: typeof import("./getPrivilegeWildcard").getPrivilegeWildcard = null as any;
export const getPrivilegeWildcardOutput: typeof import("./getPrivilegeWildcard").getPrivilegeWildcardOutput = null as any;
utilities.lazyLoad(exports, ["getPrivilegeWildcard","getPrivilegeWildcardOutput"], () => require("./getPrivilegeWildcard"));

export { GetRepositoryAptHostedArgs, GetRepositoryAptHostedResult, GetRepositoryAptHostedOutputArgs } from "./getRepositoryAptHosted";
export const getRepositoryAptHosted: typeof import("./getRepositoryAptHosted").getRepositoryAptHosted = null as any;
export const getRepositoryAptHostedOutput: typeof import("./getRepositoryAptHosted").getRepositoryAptHostedOutput = null as any;
utilities.lazyLoad(exports, ["getRepositoryAptHosted","getRepositoryAptHostedOutput"], () => require("./getRepositoryAptHosted"));

export { GetRepositoryAptProxyArgs, GetRepositoryAptProxyResult, GetRepositoryAptProxyOutputArgs } from "./getRepositoryAptProxy";
export const getRepositoryAptProxy: typeof import("./getRepositoryAptProxy").getRepositoryAptProxy = null as any;
export const getRepositoryAptProxyOutput: typeof import("./getRepositoryAptProxy").getRepositoryAptProxyOutput = null as any;
utilities.lazyLoad(exports, ["getRepositoryAptProxy","getRepositoryAptProxyOutput"], () => require("./getRepositoryAptProxy"));

export { GetRepositoryBowerGroupArgs, GetRepositoryBowerGroupResult, GetRepositoryBowerGroupOutputArgs } from "./getRepositoryBowerGroup";
export const getRepositoryBowerGroup: typeof import("./getRepositoryBowerGroup").getRepositoryBowerGroup = null as any;
export const getRepositoryBowerGroupOutput: typeof import("./getRepositoryBowerGroup").getRepositoryBowerGroupOutput = null as any;
utilities.lazyLoad(exports, ["getRepositoryBowerGroup","getRepositoryBowerGroupOutput"], () => require("./getRepositoryBowerGroup"));

export { GetRepositoryBowerHostedArgs, GetRepositoryBowerHostedResult, GetRepositoryBowerHostedOutputArgs } from "./getRepositoryBowerHosted";
export const getRepositoryBowerHosted: typeof import("./getRepositoryBowerHosted").getRepositoryBowerHosted = null as any;
export const getRepositoryBowerHostedOutput: typeof import("./getRepositoryBowerHosted").getRepositoryBowerHostedOutput = null as any;
utilities.lazyLoad(exports, ["getRepositoryBowerHosted","getRepositoryBowerHostedOutput"], () => require("./getRepositoryBowerHosted"));

export { GetRepositoryBowerProxyArgs, GetRepositoryBowerProxyResult, GetRepositoryBowerProxyOutputArgs } from "./getRepositoryBowerProxy";
export const getRepositoryBowerProxy: typeof import("./getRepositoryBowerProxy").getRepositoryBowerProxy = null as any;
export const getRepositoryBowerProxyOutput: typeof import("./getRepositoryBowerProxy").getRepositoryBowerProxyOutput = null as any;
utilities.lazyLoad(exports, ["getRepositoryBowerProxy","getRepositoryBowerProxyOutput"], () => require("./getRepositoryBowerProxy"));

export { GetRepositoryCargoGroupArgs, GetRepositoryCargoGroupResult, GetRepositoryCargoGroupOutputArgs } from "./getRepositoryCargoGroup";
export const getRepositoryCargoGroup: typeof import("./getRepositoryCargoGroup").getRepositoryCargoGroup = null as any;
export const getRepositoryCargoGroupOutput: typeof import("./getRepositoryCargoGroup").getRepositoryCargoGroupOutput = null as any;
utilities.lazyLoad(exports, ["getRepositoryCargoGroup","getRepositoryCargoGroupOutput"], () => require("./getRepositoryCargoGroup"));

export { GetRepositoryCargoHostedArgs, GetRepositoryCargoHostedResult, GetRepositoryCargoHostedOutputArgs } from "./getRepositoryCargoHosted";
export const getRepositoryCargoHosted: typeof import("./getRepositoryCargoHosted").getRepositoryCargoHosted = null as any;
export const getRepositoryCargoHostedOutput: typeof import("./getRepositoryCargoHosted").getRepositoryCargoHostedOutput = null as any;
utilities.lazyLoad(exports, ["getRepositoryCargoHosted","getRepositoryCargoHostedOutput"], () => require("./getRepositoryCargoHosted"));

export { GetRepositoryCargoProxyArgs, GetRepositoryCargoProxyResult, GetRepositoryCargoProxyOutputArgs } from "./getRepositoryCargoProxy";
export const getRepositoryCargoProxy: typeof import("./getRepositoryCargoProxy").getRepositoryCargoProxy = null as any;
export const getRepositoryCargoProxyOutput: typeof import("./getRepositoryCargoProxy").getRepositoryCargoProxyOutput = null as any;
utilities.lazyLoad(exports, ["getRepositoryCargoProxy","getRepositoryCargoProxyOutput"], () => require("./getRepositoryCargoProxy"));

export { GetRepositoryCocoapodsProxyArgs, GetRepositoryCocoapodsProxyResult, GetRepositoryCocoapodsProxyOutputArgs } from "./getRepositoryCocoapodsProxy";
export const getRepositoryCocoapodsProxy: typeof import("./getRepositoryCocoapodsProxy").getRepositoryCocoapodsProxy = null as any;
export const getRepositoryCocoapodsProxyOutput: typeof import("./getRepositoryCocoapodsProxy").getRepositoryCocoapodsProxyOutput = null as any;
utilities.lazyLoad(exports, ["getRepositoryCocoapodsProxy","getRepositoryCocoapodsProxyOutput"], () => require("./getRepositoryCocoapodsProxy"));

export { GetRepositoryConanProxyArgs, GetRepositoryConanProxyResult, GetRepositoryConanProxyOutputArgs } from "./getRepositoryConanProxy";
export const getRepositoryConanProxy: typeof import("./getRepositoryConanProxy").getRepositoryConanProxy = null as any;
export const getRepositoryConanProxyOutput: typeof import("./getRepositoryConanProxy").getRepositoryConanProxyOutput = null as any;
utilities.lazyLoad(exports, ["getRepositoryConanProxy","getRepositoryConanProxyOutput"], () => require("./getRepositoryConanProxy"));

export { GetRepositoryCondaProxyArgs, GetRepositoryCondaProxyResult, GetRepositoryCondaProxyOutputArgs } from "./getRepositoryCondaProxy";
export const getRepositoryCondaProxy: typeof import("./getRepositoryCondaProxy").getRepositoryCondaProxy = null as any;
export const getRepositoryCondaProxyOutput: typeof import("./getRepositoryCondaProxy").getRepositoryCondaProxyOutput = null as any;
utilities.lazyLoad(exports, ["getRepositoryCondaProxy","getRepositoryCondaProxyOutput"], () => require("./getRepositoryCondaProxy"));

export { GetRepositoryDockerGroupArgs, GetRepositoryDockerGroupResult, GetRepositoryDockerGroupOutputArgs } from "./getRepositoryDockerGroup";
export const getRepositoryDockerGroup: typeof import("./getRepositoryDockerGroup").getRepositoryDockerGroup = null as any;
export const getRepositoryDockerGroupOutput: typeof import("./getRepositoryDockerGroup").getRepositoryDockerGroupOutput = null as any;
utilities.lazyLoad(exports, ["getRepositoryDockerGroup","getRepositoryDockerGroupOutput"], () => require("./getRepositoryDockerGroup"));

export { GetRepositoryDockerHostedArgs, GetRepositoryDockerHostedResult, GetRepositoryDockerHostedOutputArgs } from "./getRepositoryDockerHosted";
export const getRepositoryDockerHosted: typeof import("./getRepositoryDockerHosted").getRepositoryDockerHosted = null as any;
export const getRepositoryDockerHostedOutput: typeof import("./getRepositoryDockerHosted").getRepositoryDockerHostedOutput = null as any;
utilities.lazyLoad(exports, ["getRepositoryDockerHosted","getRepositoryDockerHostedOutput"], () => require("./getRepositoryDockerHosted"));

export { GetRepositoryDockerProxyArgs, GetRepositoryDockerProxyResult, GetRepositoryDockerProxyOutputArgs } from "./getRepositoryDockerProxy";
export const getRepositoryDockerProxy: typeof import("./getRepositoryDockerProxy").getRepositoryDockerProxy = null as any;
export const getRepositoryDockerProxyOutput: typeof import("./getRepositoryDockerProxy").getRepositoryDockerProxyOutput = null as any;
utilities.lazyLoad(exports, ["getRepositoryDockerProxy","getRepositoryDockerProxyOutput"], () => require("./getRepositoryDockerProxy"));

export { GetRepositoryGitlfsHostedArgs, GetRepositoryGitlfsHostedResult, GetRepositoryGitlfsHostedOutputArgs } from "./getRepositoryGitlfsHosted";
export const getRepositoryGitlfsHosted: typeof import("./getRepositoryGitlfsHosted").getRepositoryGitlfsHosted = null as any;
export const getRepositoryGitlfsHostedOutput: typeof import("./getRepositoryGitlfsHosted").getRepositoryGitlfsHostedOutput = null as any;
utilities.lazyLoad(exports, ["getRepositoryGitlfsHosted","getRepositoryGitlfsHostedOutput"], () => require("./getRepositoryGitlfsHosted"));

export { GetRepositoryGoGroupArgs, GetRepositoryGoGroupResult, GetRepositoryGoGroupOutputArgs } from "./getRepositoryGoGroup";
export const getRepositoryGoGroup: typeof import("./getRepositoryGoGroup").getRepositoryGoGroup = null as any;
export const getRepositoryGoGroupOutput: typeof import("./getRepositoryGoGroup").getRepositoryGoGroupOutput = null as any;
utilities.lazyLoad(exports, ["getRepositoryGoGroup","getRepositoryGoGroupOutput"], () => require("./getRepositoryGoGroup"));

export { GetRepositoryGoProxyArgs, GetRepositoryGoProxyResult, GetRepositoryGoProxyOutputArgs } from "./getRepositoryGoProxy";
export const getRepositoryGoProxy: typeof import("./getRepositoryGoProxy").getRepositoryGoProxy = null as any;
export const getRepositoryGoProxyOutput: typeof import("./getRepositoryGoProxy").getRepositoryGoProxyOutput = null as any;
utilities.lazyLoad(exports, ["getRepositoryGoProxy","getRepositoryGoProxyOutput"], () => require("./getRepositoryGoProxy"));

export { GetRepositoryHelmHostedArgs, GetRepositoryHelmHostedResult, GetRepositoryHelmHostedOutputArgs } from "./getRepositoryHelmHosted";
export const getRepositoryHelmHosted: typeof import("./getRepositoryHelmHosted").getRepositoryHelmHosted = null as any;
export const getRepositoryHelmHostedOutput: typeof import("./getRepositoryHelmHosted").getRepositoryHelmHostedOutput = null as any;
utilities.lazyLoad(exports, ["getRepositoryHelmHosted","getRepositoryHelmHostedOutput"], () => require("./getRepositoryHelmHosted"));

export { GetRepositoryHelmProxyArgs, GetRepositoryHelmProxyResult, GetRepositoryHelmProxyOutputArgs } from "./getRepositoryHelmProxy";
export const getRepositoryHelmProxy: typeof import("./getRepositoryHelmProxy").getRepositoryHelmProxy = null as any;
export const getRepositoryHelmProxyOutput: typeof import("./getRepositoryHelmProxy").getRepositoryHelmProxyOutput = null as any;
utilities.lazyLoad(exports, ["getRepositoryHelmProxy","getRepositoryHelmProxyOutput"], () => require("./getRepositoryHelmProxy"));

export { GetRepositoryListResult } from "./getRepositoryList";
export const getRepositoryList: typeof import("./getRepositoryList").getRepositoryList = null as any;
export const getRepositoryListOutput: typeof import("./getRepositoryList").getRepositoryListOutput = null as any;
utilities.lazyLoad(exports, ["getRepositoryList","getRepositoryListOutput"], () => require("./getRepositoryList"));

export { GetRepositoryMavenGroupArgs, GetRepositoryMavenGroupResult, GetRepositoryMavenGroupOutputArgs } from "./getRepositoryMavenGroup";
export const getRepositoryMavenGroup: typeof import("./getRepositoryMavenGroup").getRepositoryMavenGroup = null as any;
export const getRepositoryMavenGroupOutput: typeof import("./getRepositoryMavenGroup").getRepositoryMavenGroupOutput = null as any;
utilities.lazyLoad(exports, ["getRepositoryMavenGroup","getRepositoryMavenGroupOutput"], () => require("./getRepositoryMavenGroup"));

export { GetRepositoryMavenHostedArgs, GetRepositoryMavenHostedResult, GetRepositoryMavenHostedOutputArgs } from "./getRepositoryMavenHosted";
export const getRepositoryMavenHosted: typeof import("./getRepositoryMavenHosted").getRepositoryMavenHosted = null as any;
export const getRepositoryMavenHostedOutput: typeof import("./getRepositoryMavenHosted").getRepositoryMavenHostedOutput = null as any;
utilities.lazyLoad(exports, ["getRepositoryMavenHosted","getRepositoryMavenHostedOutput"], () => require("./getRepositoryMavenHosted"));

export { GetRepositoryMavenProxyArgs, GetRepositoryMavenProxyResult, GetRepositoryMavenProxyOutputArgs } from "./getRepositoryMavenProxy";
export const getRepositoryMavenProxy: typeof import("./getRepositoryMavenProxy").getRepositoryMavenProxy = null as any;
export const getRepositoryMavenProxyOutput: typeof import("./getRepositoryMavenProxy").getRepositoryMavenProxyOutput = null as any;
utilities.lazyLoad(exports, ["getRepositoryMavenProxy","getRepositoryMavenProxyOutput"], () => require("./getRepositoryMavenProxy"));

export { GetRepositoryNpmGroupArgs, GetRepositoryNpmGroupResult, GetRepositoryNpmGroupOutputArgs } from "./getRepositoryNpmGroup";
export const getRepositoryNpmGroup: typeof import("./getRepositoryNpmGroup").getRepositoryNpmGroup = null as any;
export const getRepositoryNpmGroupOutput: typeof import("./getRepositoryNpmGroup").getRepositoryNpmGroupOutput = null as any;
utilities.lazyLoad(exports, ["getRepositoryNpmGroup","getRepositoryNpmGroupOutput"], () => require("./getRepositoryNpmGroup"));

export { GetRepositoryNpmHostedArgs, GetRepositoryNpmHostedResult, GetRepositoryNpmHostedOutputArgs } from "./getRepositoryNpmHosted";
export const getRepositoryNpmHosted: typeof import("./getRepositoryNpmHosted").getRepositoryNpmHosted = null as any;
export const getRepositoryNpmHostedOutput: typeof import("./getRepositoryNpmHosted").getRepositoryNpmHostedOutput = null as any;
utilities.lazyLoad(exports, ["getRepositoryNpmHosted","getRepositoryNpmHostedOutput"], () => require("./getRepositoryNpmHosted"));

export { GetRepositoryNpmProxyArgs, GetRepositoryNpmProxyResult, GetRepositoryNpmProxyOutputArgs } from "./getRepositoryNpmProxy";
export const getRepositoryNpmProxy: typeof import("./getRepositoryNpmProxy").getRepositoryNpmProxy = null as any;
export const getRepositoryNpmProxyOutput: typeof import("./getRepositoryNpmProxy").getRepositoryNpmProxyOutput = null as any;
utilities.lazyLoad(exports, ["getRepositoryNpmProxy","getRepositoryNpmProxyOutput"], () => require("./getRepositoryNpmProxy"));

export { GetRepositoryNugetGroupArgs, GetRepositoryNugetGroupResult, GetRepositoryNugetGroupOutputArgs } from "./getRepositoryNugetGroup";
export const getRepositoryNugetGroup: typeof import("./getRepositoryNugetGroup").getRepositoryNugetGroup = null as any;
export const getRepositoryNugetGroupOutput: typeof import("./getRepositoryNugetGroup").getRepositoryNugetGroupOutput = null as any;
utilities.lazyLoad(exports, ["getRepositoryNugetGroup","getRepositoryNugetGroupOutput"], () => require("./getRepositoryNugetGroup"));

export { GetRepositoryNugetHostedArgs, GetRepositoryNugetHostedResult, GetRepositoryNugetHostedOutputArgs } from "./getRepositoryNugetHosted";
export const getRepositoryNugetHosted: typeof import("./getRepositoryNugetHosted").getRepositoryNugetHosted = null as any;
export const getRepositoryNugetHostedOutput: typeof import("./getRepositoryNugetHosted").getRepositoryNugetHostedOutput = null as any;
utilities.lazyLoad(exports, ["getRepositoryNugetHosted","getRepositoryNugetHostedOutput"], () => require("./getRepositoryNugetHosted"));

export { GetRepositoryNugetProxyArgs, GetRepositoryNugetProxyResult, GetRepositoryNugetProxyOutputArgs } from "./getRepositoryNugetProxy";
export const getRepositoryNugetProxy: typeof import("./getRepositoryNugetProxy").getRepositoryNugetProxy = null as any;
export const getRepositoryNugetProxyOutput: typeof import("./getRepositoryNugetProxy").getRepositoryNugetProxyOutput = null as any;
utilities.lazyLoad(exports, ["getRepositoryNugetProxy","getRepositoryNugetProxyOutput"], () => require("./getRepositoryNugetProxy"));

export { GetRepositoryP2ProxyArgs, GetRepositoryP2ProxyResult, GetRepositoryP2ProxyOutputArgs } from "./getRepositoryP2Proxy";
export const getRepositoryP2Proxy: typeof import("./getRepositoryP2Proxy").getRepositoryP2Proxy = null as any;
export const getRepositoryP2ProxyOutput: typeof import("./getRepositoryP2Proxy").getRepositoryP2ProxyOutput = null as any;
utilities.lazyLoad(exports, ["getRepositoryP2Proxy","getRepositoryP2ProxyOutput"], () => require("./getRepositoryP2Proxy"));

export { GetRepositoryPypiGroupArgs, GetRepositoryPypiGroupResult, GetRepositoryPypiGroupOutputArgs } from "./getRepositoryPypiGroup";
export const getRepositoryPypiGroup: typeof import("./getRepositoryPypiGroup").getRepositoryPypiGroup = null as any;
export const getRepositoryPypiGroupOutput: typeof import("./getRepositoryPypiGroup").getRepositoryPypiGroupOutput = null as any;
utilities.lazyLoad(exports, ["getRepositoryPypiGroup","getRepositoryPypiGroupOutput"], () => require("./getRepositoryPypiGroup"));

export { GetRepositoryPypiHostedArgs, GetRepositoryPypiHostedResult, GetRepositoryPypiHostedOutputArgs } from "./getRepositoryPypiHosted";
export const getRepositoryPypiHosted: typeof import("./getRepositoryPypiHosted").getRepositoryPypiHosted = null as any;
export const getRepositoryPypiHostedOutput: typeof import("./getRepositoryPypiHosted").getRepositoryPypiHostedOutput = null as any;
utilities.lazyLoad(exports, ["getRepositoryPypiHosted","getRepositoryPypiHostedOutput"], () => require("./getRepositoryPypiHosted"));

export { GetRepositoryPypiProxyArgs, GetRepositoryPypiProxyResult, GetRepositoryPypiProxyOutputArgs } from "./getRepositoryPypiProxy";
export const getRepositoryPypiProxy: typeof import("./getRepositoryPypiProxy").getRepositoryPypiProxy = null as any;
export const getRepositoryPypiProxyOutput: typeof import("./getRepositoryPypiProxy").getRepositoryPypiProxyOutput = null as any;
utilities.lazyLoad(exports, ["getRepositoryPypiProxy","getRepositoryPypiProxyOutput"], () => require("./getRepositoryPypiProxy"));

export { GetRepositoryRGroupArgs, GetRepositoryRGroupResult, GetRepositoryRGroupOutputArgs } from "./getRepositoryRGroup";
export const getRepositoryRGroup: typeof import("./getRepositoryRGroup").getRepositoryRGroup = null as any;
export const getRepositoryRGroupOutput: typeof import("./getRepositoryRGroup").getRepositoryRGroupOutput = null as any;
utilities.lazyLoad(exports, ["getRepositoryRGroup","getRepositoryRGroupOutput"], () => require("./getRepositoryRGroup"));

export { GetRepositoryRHostedArgs, GetRepositoryRHostedResult, GetRepositoryRHostedOutputArgs } from "./getRepositoryRHosted";
export const getRepositoryRHosted: typeof import("./getRepositoryRHosted").getRepositoryRHosted = null as any;
export const getRepositoryRHostedOutput: typeof import("./getRepositoryRHosted").getRepositoryRHostedOutput = null as any;
utilities.lazyLoad(exports, ["getRepositoryRHosted","getRepositoryRHostedOutput"], () => require("./getRepositoryRHosted"));

export { GetRepositoryRProxyArgs, GetRepositoryRProxyResult, GetRepositoryRProxyOutputArgs } from "./getRepositoryRProxy";
export const getRepositoryRProxy: typeof import("./getRepositoryRProxy").getRepositoryRProxy = null as any;
export const getRepositoryRProxyOutput: typeof import("./getRepositoryRProxy").getRepositoryRProxyOutput = null as any;
utilities.lazyLoad(exports, ["getRepositoryRProxy","getRepositoryRProxyOutput"], () => require("./getRepositoryRProxy"));

export { GetRepositoryRawGroupArgs, GetRepositoryRawGroupResult, GetRepositoryRawGroupOutputArgs } from "./getRepositoryRawGroup";
export const getRepositoryRawGroup: typeof import("./getRepositoryRawGroup").getRepositoryRawGroup = null as any;
export const getRepositoryRawGroupOutput: typeof import("./getRepositoryRawGroup").getRepositoryRawGroupOutput = null as any;
utilities.lazyLoad(exports, ["getRepositoryRawGroup","getRepositoryRawGroupOutput"], () => require("./getRepositoryRawGroup"));

export { GetRepositoryRawHostedArgs, GetRepositoryRawHostedResult, GetRepositoryRawHostedOutputArgs } from "./getRepositoryRawHosted";
export const getRepositoryRawHosted: typeof import("./getRepositoryRawHosted").getRepositoryRawHosted = null as any;
export const getRepositoryRawHostedOutput: typeof import("./getRepositoryRawHosted").getRepositoryRawHostedOutput = null as any;
utilities.lazyLoad(exports, ["getRepositoryRawHosted","getRepositoryRawHostedOutput"], () => require("./getRepositoryRawHosted"));

export { GetRepositoryRawProxyArgs, GetRepositoryRawProxyResult, GetRepositoryRawProxyOutputArgs } from "./getRepositoryRawProxy";
export const getRepositoryRawProxy: typeof import("./getRepositoryRawProxy").getRepositoryRawProxy = null as any;
export const getRepositoryRawProxyOutput: typeof import("./getRepositoryRawProxy").getRepositoryRawProxyOutput = null as any;
utilities.lazyLoad(exports, ["getRepositoryRawProxy","getRepositoryRawProxyOutput"], () => require("./getRepositoryRawProxy"));

export { GetRepositoryRubygemsGroupArgs, GetRepositoryRubygemsGroupResult, GetRepositoryRubygemsGroupOutputArgs } from "./getRepositoryRubygemsGroup";
export const getRepositoryRubygemsGroup: typeof import("./getRepositoryRubygemsGroup").getRepositoryRubygemsGroup = null as any;
export const getRepositoryRubygemsGroupOutput: typeof import("./getRepositoryRubygemsGroup").getRepositoryRubygemsGroupOutput = null as any;
utilities.lazyLoad(exports, ["getRepositoryRubygemsGroup","getRepositoryRubygemsGroupOutput"], () => require("./getRepositoryRubygemsGroup"));

export { GetRepositoryRubygemsHostedArgs, GetRepositoryRubygemsHostedResult, GetRepositoryRubygemsHostedOutputArgs } from "./getRepositoryRubygemsHosted";
export const getRepositoryRubygemsHosted: typeof import("./getRepositoryRubygemsHosted").getRepositoryRubygemsHosted = null as any;
export const getRepositoryRubygemsHostedOutput: typeof import("./getRepositoryRubygemsHosted").getRepositoryRubygemsHostedOutput = null as any;
utilities.lazyLoad(exports, ["getRepositoryRubygemsHosted","getRepositoryRubygemsHostedOutput"], () => require("./getRepositoryRubygemsHosted"));

export { GetRepositoryRubygemsProxyArgs, GetRepositoryRubygemsProxyResult, GetRepositoryRubygemsProxyOutputArgs } from "./getRepositoryRubygemsProxy";
export const getRepositoryRubygemsProxy: typeof import("./getRepositoryRubygemsProxy").getRepositoryRubygemsProxy = null as any;
export const getRepositoryRubygemsProxyOutput: typeof import("./getRepositoryRubygemsProxy").getRepositoryRubygemsProxyOutput = null as any;
utilities.lazyLoad(exports, ["getRepositoryRubygemsProxy","getRepositoryRubygemsProxyOutput"], () => require("./getRepositoryRubygemsProxy"));

export { GetRepositoryYumGroupArgs, GetRepositoryYumGroupResult, GetRepositoryYumGroupOutputArgs } from "./getRepositoryYumGroup";
export const getRepositoryYumGroup: typeof import("./getRepositoryYumGroup").getRepositoryYumGroup = null as any;
export const getRepositoryYumGroupOutput: typeof import("./getRepositoryYumGroup").getRepositoryYumGroupOutput = null as any;
utilities.lazyLoad(exports, ["getRepositoryYumGroup","getRepositoryYumGroupOutput"], () => require("./getRepositoryYumGroup"));

export { GetRepositoryYumHostedArgs, GetRepositoryYumHostedResult, GetRepositoryYumHostedOutputArgs } from "./getRepositoryYumHosted";
export const getRepositoryYumHosted: typeof import("./getRepositoryYumHosted").getRepositoryYumHosted = null as any;
export const getRepositoryYumHostedOutput: typeof import("./getRepositoryYumHosted").getRepositoryYumHostedOutput = null as any;
utilities.lazyLoad(exports, ["getRepositoryYumHosted","getRepositoryYumHostedOutput"], () => require("./getRepositoryYumHosted"));

export { GetRepositoryYumProxyArgs, GetRepositoryYumProxyResult, GetRepositoryYumProxyOutputArgs } from "./getRepositoryYumProxy";
export const getRepositoryYumProxy: typeof import("./getRepositoryYumProxy").getRepositoryYumProxy = null as any;
export const getRepositoryYumProxyOutput: typeof import("./getRepositoryYumProxy").getRepositoryYumProxyOutput = null as any;
utilities.lazyLoad(exports, ["getRepositoryYumProxy","getRepositoryYumProxyOutput"], () => require("./getRepositoryYumProxy"));

export { GetRoutingRuleArgs, GetRoutingRuleResult, GetRoutingRuleOutputArgs } from "./getRoutingRule";
export const getRoutingRule: typeof import("./getRoutingRule").getRoutingRule = null as any;
export const getRoutingRuleOutput: typeof import("./getRoutingRule").getRoutingRuleOutput = null as any;
utilities.lazyLoad(exports, ["getRoutingRule","getRoutingRuleOutput"], () => require("./getRoutingRule"));

export { GetSecurityAnonymousResult } from "./getSecurityAnonymous";
export const getSecurityAnonymous: typeof import("./getSecurityAnonymous").getSecurityAnonymous = null as any;
export const getSecurityAnonymousOutput: typeof import("./getSecurityAnonymous").getSecurityAnonymousOutput = null as any;
utilities.lazyLoad(exports, ["getSecurityAnonymous","getSecurityAnonymousOutput"], () => require("./getSecurityAnonymous"));

export { GetSecurityContentSelectorArgs, GetSecurityContentSelectorResult, GetSecurityContentSelectorOutputArgs } from "./getSecurityContentSelector";
export const getSecurityContentSelector: typeof import("./getSecurityContentSelector").getSecurityContentSelector = null as any;
export const getSecurityContentSelectorOutput: typeof import("./getSecurityContentSelector").getSecurityContentSelectorOutput = null as any;
utilities.lazyLoad(exports, ["getSecurityContentSelector","getSecurityContentSelectorOutput"], () => require("./getSecurityContentSelector"));

export { GetSecurityLdapResult } from "./getSecurityLdap";
export const getSecurityLdap: typeof import("./getSecurityLdap").getSecurityLdap = null as any;
export const getSecurityLdapOutput: typeof import("./getSecurityLdap").getSecurityLdapOutput = null as any;
utilities.lazyLoad(exports, ["getSecurityLdap","getSecurityLdapOutput"], () => require("./getSecurityLdap"));

export { GetSecurityRealmsResult } from "./getSecurityRealms";
export const getSecurityRealms: typeof import("./getSecurityRealms").getSecurityRealms = null as any;
export const getSecurityRealmsOutput: typeof import("./getSecurityRealms").getSecurityRealmsOutput = null as any;
utilities.lazyLoad(exports, ["getSecurityRealms","getSecurityRealmsOutput"], () => require("./getSecurityRealms"));

export { GetSecurityRoleArgs, GetSecurityRoleResult, GetSecurityRoleOutputArgs } from "./getSecurityRole";
export const getSecurityRole: typeof import("./getSecurityRole").getSecurityRole = null as any;
export const getSecurityRoleOutput: typeof import("./getSecurityRole").getSecurityRoleOutput = null as any;
utilities.lazyLoad(exports, ["getSecurityRole","getSecurityRoleOutput"], () => require("./getSecurityRole"));

export { GetSecuritySamlResult } from "./getSecuritySaml";
export const getSecuritySaml: typeof import("./getSecuritySaml").getSecuritySaml = null as any;
export const getSecuritySamlOutput: typeof import("./getSecuritySaml").getSecuritySamlOutput = null as any;
utilities.lazyLoad(exports, ["getSecuritySaml","getSecuritySamlOutput"], () => require("./getSecuritySaml"));

export { GetSecuritySslArgs, GetSecuritySslResult, GetSecuritySslOutputArgs } from "./getSecuritySsl";
export const getSecuritySsl: typeof import("./getSecuritySsl").getSecuritySsl = null as any;
export const getSecuritySslOutput: typeof import("./getSecuritySsl").getSecuritySslOutput = null as any;
utilities.lazyLoad(exports, ["getSecuritySsl","getSecuritySslOutput"], () => require("./getSecuritySsl"));

export { GetSecuritySslTruststoreResult } from "./getSecuritySslTruststore";
export const getSecuritySslTruststore: typeof import("./getSecuritySslTruststore").getSecuritySslTruststore = null as any;
export const getSecuritySslTruststoreOutput: typeof import("./getSecuritySslTruststore").getSecuritySslTruststoreOutput = null as any;
utilities.lazyLoad(exports, ["getSecuritySslTruststore","getSecuritySslTruststoreOutput"], () => require("./getSecuritySslTruststore"));

export { GetSecurityUserArgs, GetSecurityUserResult, GetSecurityUserOutputArgs } from "./getSecurityUser";
export const getSecurityUser: typeof import("./getSecurityUser").getSecurityUser = null as any;
export const getSecurityUserOutput: typeof import("./getSecurityUser").getSecurityUserOutput = null as any;
utilities.lazyLoad(exports, ["getSecurityUser","getSecurityUserOutput"], () => require("./getSecurityUser"));

export { GetSecurityUserTokenResult } from "./getSecurityUserToken";
export const getSecurityUserToken: typeof import("./getSecurityUserToken").getSecurityUserToken = null as any;
export const getSecurityUserTokenOutput: typeof import("./getSecurityUserToken").getSecurityUserTokenOutput = null as any;
utilities.lazyLoad(exports, ["getSecurityUserToken","getSecurityUserTokenOutput"], () => require("./getSecurityUserToken"));

export { MailConfigArgs, MailConfigState } from "./mailConfig";
export type MailConfig = import("./mailConfig").MailConfig;
export const MailConfig: typeof import("./mailConfig").MailConfig = null as any;
utilities.lazyLoad(exports, ["MailConfig"], () => require("./mailConfig"));

export { PrivilegeApplicationArgs, PrivilegeApplicationState } from "./privilegeApplication";
export type PrivilegeApplication = import("./privilegeApplication").PrivilegeApplication;
export const PrivilegeApplication: typeof import("./privilegeApplication").PrivilegeApplication = null as any;
utilities.lazyLoad(exports, ["PrivilegeApplication"], () => require("./privilegeApplication"));

export { PrivilegeRepositoryAdminArgs, PrivilegeRepositoryAdminState } from "./privilegeRepositoryAdmin";
export type PrivilegeRepositoryAdmin = import("./privilegeRepositoryAdmin").PrivilegeRepositoryAdmin;
export const PrivilegeRepositoryAdmin: typeof import("./privilegeRepositoryAdmin").PrivilegeRepositoryAdmin = null as any;
utilities.lazyLoad(exports, ["PrivilegeRepositoryAdmin"], () => require("./privilegeRepositoryAdmin"));

export { PrivilegeRepositoryContentSelectorArgs, PrivilegeRepositoryContentSelectorState } from "./privilegeRepositoryContentSelector";
export type PrivilegeRepositoryContentSelector = import("./privilegeRepositoryContentSelector").PrivilegeRepositoryContentSelector;
export const PrivilegeRepositoryContentSelector: typeof import("./privilegeRepositoryContentSelector").PrivilegeRepositoryContentSelector = null as any;
utilities.lazyLoad(exports, ["PrivilegeRepositoryContentSelector"], () => require("./privilegeRepositoryContentSelector"));

export { PrivilegeRepositoryViewArgs, PrivilegeRepositoryViewState } from "./privilegeRepositoryView";
export type PrivilegeRepositoryView = import("./privilegeRepositoryView").PrivilegeRepositoryView;
export const PrivilegeRepositoryView: typeof import("./privilegeRepositoryView").PrivilegeRepositoryView = null as any;
utilities.lazyLoad(exports, ["PrivilegeRepositoryView"], () => require("./privilegeRepositoryView"));

export { PrivilegeScriptArgs, PrivilegeScriptState } from "./privilegeScript";
export type PrivilegeScript = import("./privilegeScript").PrivilegeScript;
export const PrivilegeScript: typeof import("./privilegeScript").PrivilegeScript = null as any;
utilities.lazyLoad(exports, ["PrivilegeScript"], () => require("./privilegeScript"));

export { PrivilegeWildcardArgs, PrivilegeWildcardState } from "./privilegeWildcard";
export type PrivilegeWildcard = import("./privilegeWildcard").PrivilegeWildcard;
export const PrivilegeWildcard: typeof import("./privilegeWildcard").PrivilegeWildcard = null as any;
utilities.lazyLoad(exports, ["PrivilegeWildcard"], () => require("./privilegeWildcard"));

export * from "./provider";
import { Provider } from "./provider";

export { RepositoryAptHostedArgs, RepositoryAptHostedState } from "./repositoryAptHosted";
export type RepositoryAptHosted = import("./repositoryAptHosted").RepositoryAptHosted;
export const RepositoryAptHosted: typeof import("./repositoryAptHosted").RepositoryAptHosted = null as any;
utilities.lazyLoad(exports, ["RepositoryAptHosted"], () => require("./repositoryAptHosted"));

export { RepositoryAptProxyArgs, RepositoryAptProxyState } from "./repositoryAptProxy";
export type RepositoryAptProxy = import("./repositoryAptProxy").RepositoryAptProxy;
export const RepositoryAptProxy: typeof import("./repositoryAptProxy").RepositoryAptProxy = null as any;
utilities.lazyLoad(exports, ["RepositoryAptProxy"], () => require("./repositoryAptProxy"));

export { RepositoryBowerGroupArgs, RepositoryBowerGroupState } from "./repositoryBowerGroup";
export type RepositoryBowerGroup = import("./repositoryBowerGroup").RepositoryBowerGroup;
export const RepositoryBowerGroup: typeof import("./repositoryBowerGroup").RepositoryBowerGroup = null as any;
utilities.lazyLoad(exports, ["RepositoryBowerGroup"], () => require("./repositoryBowerGroup"));

export { RepositoryBowerHostedArgs, RepositoryBowerHostedState } from "./repositoryBowerHosted";
export type RepositoryBowerHosted = import("./repositoryBowerHosted").RepositoryBowerHosted;
export const RepositoryBowerHosted: typeof import("./repositoryBowerHosted").RepositoryBowerHosted = null as any;
utilities.lazyLoad(exports, ["RepositoryBowerHosted"], () => require("./repositoryBowerHosted"));

export { RepositoryBowerProxyArgs, RepositoryBowerProxyState } from "./repositoryBowerProxy";
export type RepositoryBowerProxy = import("./repositoryBowerProxy").RepositoryBowerProxy;
export const RepositoryBowerProxy: typeof import("./repositoryBowerProxy").RepositoryBowerProxy = null as any;
utilities.lazyLoad(exports, ["RepositoryBowerProxy"], () => require("./repositoryBowerProxy"));

export { RepositoryCargoGroupArgs, RepositoryCargoGroupState } from "./repositoryCargoGroup";
export type RepositoryCargoGroup = import("./repositoryCargoGroup").RepositoryCargoGroup;
export const RepositoryCargoGroup: typeof import("./repositoryCargoGroup").RepositoryCargoGroup = null as any;
utilities.lazyLoad(exports, ["RepositoryCargoGroup"], () => require("./repositoryCargoGroup"));

export { RepositoryCargoHostedArgs, RepositoryCargoHostedState } from "./repositoryCargoHosted";
export type RepositoryCargoHosted = import("./repositoryCargoHosted").RepositoryCargoHosted;
export const RepositoryCargoHosted: typeof import("./repositoryCargoHosted").RepositoryCargoHosted = null as any;
utilities.lazyLoad(exports, ["RepositoryCargoHosted"], () => require("./repositoryCargoHosted"));

export { RepositoryCargoProxyArgs, RepositoryCargoProxyState } from "./repositoryCargoProxy";
export type RepositoryCargoProxy = import("./repositoryCargoProxy").RepositoryCargoProxy;
export const RepositoryCargoProxy: typeof import("./repositoryCargoProxy").RepositoryCargoProxy = null as any;
utilities.lazyLoad(exports, ["RepositoryCargoProxy"], () => require("./repositoryCargoProxy"));

export { RepositoryCocoapodsProxyArgs, RepositoryCocoapodsProxyState } from "./repositoryCocoapodsProxy";
export type RepositoryCocoapodsProxy = import("./repositoryCocoapodsProxy").RepositoryCocoapodsProxy;
export const RepositoryCocoapodsProxy: typeof import("./repositoryCocoapodsProxy").RepositoryCocoapodsProxy = null as any;
utilities.lazyLoad(exports, ["RepositoryCocoapodsProxy"], () => require("./repositoryCocoapodsProxy"));

export { RepositoryConanProxyArgs, RepositoryConanProxyState } from "./repositoryConanProxy";
export type RepositoryConanProxy = import("./repositoryConanProxy").RepositoryConanProxy;
export const RepositoryConanProxy: typeof import("./repositoryConanProxy").RepositoryConanProxy = null as any;
utilities.lazyLoad(exports, ["RepositoryConanProxy"], () => require("./repositoryConanProxy"));

export { RepositoryCondaProxyArgs, RepositoryCondaProxyState } from "./repositoryCondaProxy";
export type RepositoryCondaProxy = import("./repositoryCondaProxy").RepositoryCondaProxy;
export const RepositoryCondaProxy: typeof import("./repositoryCondaProxy").RepositoryCondaProxy = null as any;
utilities.lazyLoad(exports, ["RepositoryCondaProxy"], () => require("./repositoryCondaProxy"));

export { RepositoryDockerGroupArgs, RepositoryDockerGroupState } from "./repositoryDockerGroup";
export type RepositoryDockerGroup = import("./repositoryDockerGroup").RepositoryDockerGroup;
export const RepositoryDockerGroup: typeof import("./repositoryDockerGroup").RepositoryDockerGroup = null as any;
utilities.lazyLoad(exports, ["RepositoryDockerGroup"], () => require("./repositoryDockerGroup"));

export { RepositoryDockerHostedArgs, RepositoryDockerHostedState } from "./repositoryDockerHosted";
export type RepositoryDockerHosted = import("./repositoryDockerHosted").RepositoryDockerHosted;
export const RepositoryDockerHosted: typeof import("./repositoryDockerHosted").RepositoryDockerHosted = null as any;
utilities.lazyLoad(exports, ["RepositoryDockerHosted"], () => require("./repositoryDockerHosted"));

export { RepositoryDockerProxyArgs, RepositoryDockerProxyState } from "./repositoryDockerProxy";
export type RepositoryDockerProxy = import("./repositoryDockerProxy").RepositoryDockerProxy;
export const RepositoryDockerProxy: typeof import("./repositoryDockerProxy").RepositoryDockerProxy = null as any;
utilities.lazyLoad(exports, ["RepositoryDockerProxy"], () => require("./repositoryDockerProxy"));

export { RepositoryGitlfsHostedArgs, RepositoryGitlfsHostedState } from "./repositoryGitlfsHosted";
export type RepositoryGitlfsHosted = import("./repositoryGitlfsHosted").RepositoryGitlfsHosted;
export const RepositoryGitlfsHosted: typeof import("./repositoryGitlfsHosted").RepositoryGitlfsHosted = null as any;
utilities.lazyLoad(exports, ["RepositoryGitlfsHosted"], () => require("./repositoryGitlfsHosted"));

export { RepositoryGoGroupArgs, RepositoryGoGroupState } from "./repositoryGoGroup";
export type RepositoryGoGroup = import("./repositoryGoGroup").RepositoryGoGroup;
export const RepositoryGoGroup: typeof import("./repositoryGoGroup").RepositoryGoGroup = null as any;
utilities.lazyLoad(exports, ["RepositoryGoGroup"], () => require("./repositoryGoGroup"));

export { RepositoryGoProxyArgs, RepositoryGoProxyState } from "./repositoryGoProxy";
export type RepositoryGoProxy = import("./repositoryGoProxy").RepositoryGoProxy;
export const RepositoryGoProxy: typeof import("./repositoryGoProxy").RepositoryGoProxy = null as any;
utilities.lazyLoad(exports, ["RepositoryGoProxy"], () => require("./repositoryGoProxy"));

export { RepositoryHelmHostedArgs, RepositoryHelmHostedState } from "./repositoryHelmHosted";
export type RepositoryHelmHosted = import("./repositoryHelmHosted").RepositoryHelmHosted;
export const RepositoryHelmHosted: typeof import("./repositoryHelmHosted").RepositoryHelmHosted = null as any;
utilities.lazyLoad(exports, ["RepositoryHelmHosted"], () => require("./repositoryHelmHosted"));

export { RepositoryHelmProxyArgs, RepositoryHelmProxyState } from "./repositoryHelmProxy";
export type RepositoryHelmProxy = import("./repositoryHelmProxy").RepositoryHelmProxy;
export const RepositoryHelmProxy: typeof import("./repositoryHelmProxy").RepositoryHelmProxy = null as any;
utilities.lazyLoad(exports, ["RepositoryHelmProxy"], () => require("./repositoryHelmProxy"));

export { RepositoryMavenGroupArgs, RepositoryMavenGroupState } from "./repositoryMavenGroup";
export type RepositoryMavenGroup = import("./repositoryMavenGroup").RepositoryMavenGroup;
export const RepositoryMavenGroup: typeof import("./repositoryMavenGroup").RepositoryMavenGroup = null as any;
utilities.lazyLoad(exports, ["RepositoryMavenGroup"], () => require("./repositoryMavenGroup"));

export { RepositoryMavenHostedArgs, RepositoryMavenHostedState } from "./repositoryMavenHosted";
export type RepositoryMavenHosted = import("./repositoryMavenHosted").RepositoryMavenHosted;
export const RepositoryMavenHosted: typeof import("./repositoryMavenHosted").RepositoryMavenHosted = null as any;
utilities.lazyLoad(exports, ["RepositoryMavenHosted"], () => require("./repositoryMavenHosted"));

export { RepositoryMavenProxyArgs, RepositoryMavenProxyState } from "./repositoryMavenProxy";
export type RepositoryMavenProxy = import("./repositoryMavenProxy").RepositoryMavenProxy;
export const RepositoryMavenProxy: typeof import("./repositoryMavenProxy").RepositoryMavenProxy = null as any;
utilities.lazyLoad(exports, ["RepositoryMavenProxy"], () => require("./repositoryMavenProxy"));

export { RepositoryNpmGroupArgs, RepositoryNpmGroupState } from "./repositoryNpmGroup";
export type RepositoryNpmGroup = import("./repositoryNpmGroup").RepositoryNpmGroup;
export const RepositoryNpmGroup: typeof import("./repositoryNpmGroup").RepositoryNpmGroup = null as any;
utilities.lazyLoad(exports, ["RepositoryNpmGroup"], () => require("./repositoryNpmGroup"));

export { RepositoryNpmHostedArgs, RepositoryNpmHostedState } from "./repositoryNpmHosted";
export type RepositoryNpmHosted = import("./repositoryNpmHosted").RepositoryNpmHosted;
export const RepositoryNpmHosted: typeof import("./repositoryNpmHosted").RepositoryNpmHosted = null as any;
utilities.lazyLoad(exports, ["RepositoryNpmHosted"], () => require("./repositoryNpmHosted"));

export { RepositoryNpmProxyArgs, RepositoryNpmProxyState } from "./repositoryNpmProxy";
export type RepositoryNpmProxy = import("./repositoryNpmProxy").RepositoryNpmProxy;
export const RepositoryNpmProxy: typeof import("./repositoryNpmProxy").RepositoryNpmProxy = null as any;
utilities.lazyLoad(exports, ["RepositoryNpmProxy"], () => require("./repositoryNpmProxy"));

export { RepositoryNugetGroupArgs, RepositoryNugetGroupState } from "./repositoryNugetGroup";
export type RepositoryNugetGroup = import("./repositoryNugetGroup").RepositoryNugetGroup;
export const RepositoryNugetGroup: typeof import("./repositoryNugetGroup").RepositoryNugetGroup = null as any;
utilities.lazyLoad(exports, ["RepositoryNugetGroup"], () => require("./repositoryNugetGroup"));

export { RepositoryNugetHostedArgs, RepositoryNugetHostedState } from "./repositoryNugetHosted";
export type RepositoryNugetHosted = import("./repositoryNugetHosted").RepositoryNugetHosted;
export const RepositoryNugetHosted: typeof import("./repositoryNugetHosted").RepositoryNugetHosted = null as any;
utilities.lazyLoad(exports, ["RepositoryNugetHosted"], () => require("./repositoryNugetHosted"));

export { RepositoryNugetProxyArgs, RepositoryNugetProxyState } from "./repositoryNugetProxy";
export type RepositoryNugetProxy = import("./repositoryNugetProxy").RepositoryNugetProxy;
export const RepositoryNugetProxy: typeof import("./repositoryNugetProxy").RepositoryNugetProxy = null as any;
utilities.lazyLoad(exports, ["RepositoryNugetProxy"], () => require("./repositoryNugetProxy"));

export { RepositoryP2ProxyArgs, RepositoryP2ProxyState } from "./repositoryP2Proxy";
export type RepositoryP2Proxy = import("./repositoryP2Proxy").RepositoryP2Proxy;
export const RepositoryP2Proxy: typeof import("./repositoryP2Proxy").RepositoryP2Proxy = null as any;
utilities.lazyLoad(exports, ["RepositoryP2Proxy"], () => require("./repositoryP2Proxy"));

export { RepositoryPypiGroupArgs, RepositoryPypiGroupState } from "./repositoryPypiGroup";
export type RepositoryPypiGroup = import("./repositoryPypiGroup").RepositoryPypiGroup;
export const RepositoryPypiGroup: typeof import("./repositoryPypiGroup").RepositoryPypiGroup = null as any;
utilities.lazyLoad(exports, ["RepositoryPypiGroup"], () => require("./repositoryPypiGroup"));

export { RepositoryPypiHostedArgs, RepositoryPypiHostedState } from "./repositoryPypiHosted";
export type RepositoryPypiHosted = import("./repositoryPypiHosted").RepositoryPypiHosted;
export const RepositoryPypiHosted: typeof import("./repositoryPypiHosted").RepositoryPypiHosted = null as any;
utilities.lazyLoad(exports, ["RepositoryPypiHosted"], () => require("./repositoryPypiHosted"));

export { RepositoryPypiProxyArgs, RepositoryPypiProxyState } from "./repositoryPypiProxy";
export type RepositoryPypiProxy = import("./repositoryPypiProxy").RepositoryPypiProxy;
export const RepositoryPypiProxy: typeof import("./repositoryPypiProxy").RepositoryPypiProxy = null as any;
utilities.lazyLoad(exports, ["RepositoryPypiProxy"], () => require("./repositoryPypiProxy"));

export { RepositoryRGroupArgs, RepositoryRGroupState } from "./repositoryRGroup";
export type RepositoryRGroup = import("./repositoryRGroup").RepositoryRGroup;
export const RepositoryRGroup: typeof import("./repositoryRGroup").RepositoryRGroup = null as any;
utilities.lazyLoad(exports, ["RepositoryRGroup"], () => require("./repositoryRGroup"));

export { RepositoryRHostedArgs, RepositoryRHostedState } from "./repositoryRHosted";
export type RepositoryRHosted = import("./repositoryRHosted").RepositoryRHosted;
export const RepositoryRHosted: typeof import("./repositoryRHosted").RepositoryRHosted = null as any;
utilities.lazyLoad(exports, ["RepositoryRHosted"], () => require("./repositoryRHosted"));

export { RepositoryRProxyArgs, RepositoryRProxyState } from "./repositoryRProxy";
export type RepositoryRProxy = import("./repositoryRProxy").RepositoryRProxy;
export const RepositoryRProxy: typeof import("./repositoryRProxy").RepositoryRProxy = null as any;
utilities.lazyLoad(exports, ["RepositoryRProxy"], () => require("./repositoryRProxy"));

export { RepositoryRawGroupArgs, RepositoryRawGroupState } from "./repositoryRawGroup";
export type RepositoryRawGroup = import("./repositoryRawGroup").RepositoryRawGroup;
export const RepositoryRawGroup: typeof import("./repositoryRawGroup").RepositoryRawGroup = null as any;
utilities.lazyLoad(exports, ["RepositoryRawGroup"], () => require("./repositoryRawGroup"));

export { RepositoryRawHostedArgs, RepositoryRawHostedState } from "./repositoryRawHosted";
export type RepositoryRawHosted = import("./repositoryRawHosted").RepositoryRawHosted;
export const RepositoryRawHosted: typeof import("./repositoryRawHosted").RepositoryRawHosted = null as any;
utilities.lazyLoad(exports, ["RepositoryRawHosted"], () => require("./repositoryRawHosted"));

export { RepositoryRawProxyArgs, RepositoryRawProxyState } from "./repositoryRawProxy";
export type RepositoryRawProxy = import("./repositoryRawProxy").RepositoryRawProxy;
export const RepositoryRawProxy: typeof import("./repositoryRawProxy").RepositoryRawProxy = null as any;
utilities.lazyLoad(exports, ["RepositoryRawProxy"], () => require("./repositoryRawProxy"));

export { RepositoryRubygemsGroupArgs, RepositoryRubygemsGroupState } from "./repositoryRubygemsGroup";
export type RepositoryRubygemsGroup = import("./repositoryRubygemsGroup").RepositoryRubygemsGroup;
export const RepositoryRubygemsGroup: typeof import("./repositoryRubygemsGroup").RepositoryRubygemsGroup = null as any;
utilities.lazyLoad(exports, ["RepositoryRubygemsGroup"], () => require("./repositoryRubygemsGroup"));

export { RepositoryRubygemsHostedArgs, RepositoryRubygemsHostedState } from "./repositoryRubygemsHosted";
export type RepositoryRubygemsHosted = import("./repositoryRubygemsHosted").RepositoryRubygemsHosted;
export const RepositoryRubygemsHosted: typeof import("./repositoryRubygemsHosted").RepositoryRubygemsHosted = null as any;
utilities.lazyLoad(exports, ["RepositoryRubygemsHosted"], () => require("./repositoryRubygemsHosted"));

export { RepositoryRubygemsProxyArgs, RepositoryRubygemsProxyState } from "./repositoryRubygemsProxy";
export type RepositoryRubygemsProxy = import("./repositoryRubygemsProxy").RepositoryRubygemsProxy;
export const RepositoryRubygemsProxy: typeof import("./repositoryRubygemsProxy").RepositoryRubygemsProxy = null as any;
utilities.lazyLoad(exports, ["RepositoryRubygemsProxy"], () => require("./repositoryRubygemsProxy"));

export { RepositoryYumGroupArgs, RepositoryYumGroupState } from "./repositoryYumGroup";
export type RepositoryYumGroup = import("./repositoryYumGroup").RepositoryYumGroup;
export const RepositoryYumGroup: typeof import("./repositoryYumGroup").RepositoryYumGroup = null as any;
utilities.lazyLoad(exports, ["RepositoryYumGroup"], () => require("./repositoryYumGroup"));

export { RepositoryYumHostedArgs, RepositoryYumHostedState } from "./repositoryYumHosted";
export type RepositoryYumHosted = import("./repositoryYumHosted").RepositoryYumHosted;
export const RepositoryYumHosted: typeof import("./repositoryYumHosted").RepositoryYumHosted = null as any;
utilities.lazyLoad(exports, ["RepositoryYumHosted"], () => require("./repositoryYumHosted"));

export { RepositoryYumProxyArgs, RepositoryYumProxyState } from "./repositoryYumProxy";
export type RepositoryYumProxy = import("./repositoryYumProxy").RepositoryYumProxy;
export const RepositoryYumProxy: typeof import("./repositoryYumProxy").RepositoryYumProxy = null as any;
utilities.lazyLoad(exports, ["RepositoryYumProxy"], () => require("./repositoryYumProxy"));

export { RoutingRuleArgs, RoutingRuleState } from "./routingRule";
export type RoutingRule = import("./routingRule").RoutingRule;
export const RoutingRule: typeof import("./routingRule").RoutingRule = null as any;
utilities.lazyLoad(exports, ["RoutingRule"], () => require("./routingRule"));

export { ScriptArgs, ScriptState } from "./script";
export type Script = import("./script").Script;
export const Script: typeof import("./script").Script = null as any;
utilities.lazyLoad(exports, ["Script"], () => require("./script"));

export { SecurityAnonymousArgs, SecurityAnonymousState } from "./securityAnonymous";
export type SecurityAnonymous = import("./securityAnonymous").SecurityAnonymous;
export const SecurityAnonymous: typeof import("./securityAnonymous").SecurityAnonymous = null as any;
utilities.lazyLoad(exports, ["SecurityAnonymous"], () => require("./securityAnonymous"));

export { SecurityContentSelectorArgs, SecurityContentSelectorState } from "./securityContentSelector";
export type SecurityContentSelector = import("./securityContentSelector").SecurityContentSelector;
export const SecurityContentSelector: typeof import("./securityContentSelector").SecurityContentSelector = null as any;
utilities.lazyLoad(exports, ["SecurityContentSelector"], () => require("./securityContentSelector"));

export { SecurityLdapArgs, SecurityLdapState } from "./securityLdap";
export type SecurityLdap = import("./securityLdap").SecurityLdap;
export const SecurityLdap: typeof import("./securityLdap").SecurityLdap = null as any;
utilities.lazyLoad(exports, ["SecurityLdap"], () => require("./securityLdap"));

export { SecurityLdapOrderArgs, SecurityLdapOrderState } from "./securityLdapOrder";
export type SecurityLdapOrder = import("./securityLdapOrder").SecurityLdapOrder;
export const SecurityLdapOrder: typeof import("./securityLdapOrder").SecurityLdapOrder = null as any;
utilities.lazyLoad(exports, ["SecurityLdapOrder"], () => require("./securityLdapOrder"));

export { SecurityRealmsArgs, SecurityRealmsState } from "./securityRealms";
export type SecurityRealms = import("./securityRealms").SecurityRealms;
export const SecurityRealms: typeof import("./securityRealms").SecurityRealms = null as any;
utilities.lazyLoad(exports, ["SecurityRealms"], () => require("./securityRealms"));

export { SecurityRoleArgs, SecurityRoleState } from "./securityRole";
export type SecurityRole = import("./securityRole").SecurityRole;
export const SecurityRole: typeof import("./securityRole").SecurityRole = null as any;
utilities.lazyLoad(exports, ["SecurityRole"], () => require("./securityRole"));

export { SecuritySamlArgs, SecuritySamlState } from "./securitySaml";
export type SecuritySaml = import("./securitySaml").SecuritySaml;
export const SecuritySaml: typeof import("./securitySaml").SecuritySaml = null as any;
utilities.lazyLoad(exports, ["SecuritySaml"], () => require("./securitySaml"));

export { SecuritySslTruststoreArgs, SecuritySslTruststoreState } from "./securitySslTruststore";
export type SecuritySslTruststore = import("./securitySslTruststore").SecuritySslTruststore;
export const SecuritySslTruststore: typeof import("./securitySslTruststore").SecuritySslTruststore = null as any;
utilities.lazyLoad(exports, ["SecuritySslTruststore"], () => require("./securitySslTruststore"));

export { SecurityUserArgs, SecurityUserState } from "./securityUser";
export type SecurityUser = import("./securityUser").SecurityUser;
export const SecurityUser: typeof import("./securityUser").SecurityUser = null as any;
utilities.lazyLoad(exports, ["SecurityUser"], () => require("./securityUser"));

export { SecurityUserTokenArgs, SecurityUserTokenState } from "./securityUserToken";
export type SecurityUserToken = import("./securityUserToken").SecurityUserToken;
export const SecurityUserToken: typeof import("./securityUserToken").SecurityUserToken = null as any;
utilities.lazyLoad(exports, ["SecurityUserToken"], () => require("./securityUserToken"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "nexus:index/blobstoreAzure:BlobstoreAzure":
                return new BlobstoreAzure(name, <any>undefined, { urn })
            case "nexus:index/blobstoreFile:BlobstoreFile":
                return new BlobstoreFile(name, <any>undefined, { urn })
            case "nexus:index/blobstoreGroup:BlobstoreGroup":
                return new BlobstoreGroup(name, <any>undefined, { urn })
            case "nexus:index/blobstoreS3:BlobstoreS3":
                return new BlobstoreS3(name, <any>undefined, { urn })
            case "nexus:index/mailConfig:MailConfig":
                return new MailConfig(name, <any>undefined, { urn })
            case "nexus:index/privilegeApplication:PrivilegeApplication":
                return new PrivilegeApplication(name, <any>undefined, { urn })
            case "nexus:index/privilegeRepositoryAdmin:PrivilegeRepositoryAdmin":
                return new PrivilegeRepositoryAdmin(name, <any>undefined, { urn })
            case "nexus:index/privilegeRepositoryContentSelector:PrivilegeRepositoryContentSelector":
                return new PrivilegeRepositoryContentSelector(name, <any>undefined, { urn })
            case "nexus:index/privilegeRepositoryView:PrivilegeRepositoryView":
                return new PrivilegeRepositoryView(name, <any>undefined, { urn })
            case "nexus:index/privilegeScript:PrivilegeScript":
                return new PrivilegeScript(name, <any>undefined, { urn })
            case "nexus:index/privilegeWildcard:PrivilegeWildcard":
                return new PrivilegeWildcard(name, <any>undefined, { urn })
            case "nexus:index/repositoryAptHosted:RepositoryAptHosted":
                return new RepositoryAptHosted(name, <any>undefined, { urn })
            case "nexus:index/repositoryAptProxy:RepositoryAptProxy":
                return new RepositoryAptProxy(name, <any>undefined, { urn })
            case "nexus:index/repositoryBowerGroup:RepositoryBowerGroup":
                return new RepositoryBowerGroup(name, <any>undefined, { urn })
            case "nexus:index/repositoryBowerHosted:RepositoryBowerHosted":
                return new RepositoryBowerHosted(name, <any>undefined, { urn })
            case "nexus:index/repositoryBowerProxy:RepositoryBowerProxy":
                return new RepositoryBowerProxy(name, <any>undefined, { urn })
            case "nexus:index/repositoryCargoGroup:RepositoryCargoGroup":
                return new RepositoryCargoGroup(name, <any>undefined, { urn })
            case "nexus:index/repositoryCargoHosted:RepositoryCargoHosted":
                return new RepositoryCargoHosted(name, <any>undefined, { urn })
            case "nexus:index/repositoryCargoProxy:RepositoryCargoProxy":
                return new RepositoryCargoProxy(name, <any>undefined, { urn })
            case "nexus:index/repositoryCocoapodsProxy:RepositoryCocoapodsProxy":
                return new RepositoryCocoapodsProxy(name, <any>undefined, { urn })
            case "nexus:index/repositoryConanProxy:RepositoryConanProxy":
                return new RepositoryConanProxy(name, <any>undefined, { urn })
            case "nexus:index/repositoryCondaProxy:RepositoryCondaProxy":
                return new RepositoryCondaProxy(name, <any>undefined, { urn })
            case "nexus:index/repositoryDockerGroup:RepositoryDockerGroup":
                return new RepositoryDockerGroup(name, <any>undefined, { urn })
            case "nexus:index/repositoryDockerHosted:RepositoryDockerHosted":
                return new RepositoryDockerHosted(name, <any>undefined, { urn })
            case "nexus:index/repositoryDockerProxy:RepositoryDockerProxy":
                return new RepositoryDockerProxy(name, <any>undefined, { urn })
            case "nexus:index/repositoryGitlfsHosted:RepositoryGitlfsHosted":
                return new RepositoryGitlfsHosted(name, <any>undefined, { urn })
            case "nexus:index/repositoryGoGroup:RepositoryGoGroup":
                return new RepositoryGoGroup(name, <any>undefined, { urn })
            case "nexus:index/repositoryGoProxy:RepositoryGoProxy":
                return new RepositoryGoProxy(name, <any>undefined, { urn })
            case "nexus:index/repositoryHelmHosted:RepositoryHelmHosted":
                return new RepositoryHelmHosted(name, <any>undefined, { urn })
            case "nexus:index/repositoryHelmProxy:RepositoryHelmProxy":
                return new RepositoryHelmProxy(name, <any>undefined, { urn })
            case "nexus:index/repositoryMavenGroup:RepositoryMavenGroup":
                return new RepositoryMavenGroup(name, <any>undefined, { urn })
            case "nexus:index/repositoryMavenHosted:RepositoryMavenHosted":
                return new RepositoryMavenHosted(name, <any>undefined, { urn })
            case "nexus:index/repositoryMavenProxy:RepositoryMavenProxy":
                return new RepositoryMavenProxy(name, <any>undefined, { urn })
            case "nexus:index/repositoryNpmGroup:RepositoryNpmGroup":
                return new RepositoryNpmGroup(name, <any>undefined, { urn })
            case "nexus:index/repositoryNpmHosted:RepositoryNpmHosted":
                return new RepositoryNpmHosted(name, <any>undefined, { urn })
            case "nexus:index/repositoryNpmProxy:RepositoryNpmProxy":
                return new RepositoryNpmProxy(name, <any>undefined, { urn })
            case "nexus:index/repositoryNugetGroup:RepositoryNugetGroup":
                return new RepositoryNugetGroup(name, <any>undefined, { urn })
            case "nexus:index/repositoryNugetHosted:RepositoryNugetHosted":
                return new RepositoryNugetHosted(name, <any>undefined, { urn })
            case "nexus:index/repositoryNugetProxy:RepositoryNugetProxy":
                return new RepositoryNugetProxy(name, <any>undefined, { urn })
            case "nexus:index/repositoryP2Proxy:RepositoryP2Proxy":
                return new RepositoryP2Proxy(name, <any>undefined, { urn })
            case "nexus:index/repositoryPypiGroup:RepositoryPypiGroup":
                return new RepositoryPypiGroup(name, <any>undefined, { urn })
            case "nexus:index/repositoryPypiHosted:RepositoryPypiHosted":
                return new RepositoryPypiHosted(name, <any>undefined, { urn })
            case "nexus:index/repositoryPypiProxy:RepositoryPypiProxy":
                return new RepositoryPypiProxy(name, <any>undefined, { urn })
            case "nexus:index/repositoryRGroup:RepositoryRGroup":
                return new RepositoryRGroup(name, <any>undefined, { urn })
            case "nexus:index/repositoryRHosted:RepositoryRHosted":
                return new RepositoryRHosted(name, <any>undefined, { urn })
            case "nexus:index/repositoryRProxy:RepositoryRProxy":
                return new RepositoryRProxy(name, <any>undefined, { urn })
            case "nexus:index/repositoryRawGroup:RepositoryRawGroup":
                return new RepositoryRawGroup(name, <any>undefined, { urn })
            case "nexus:index/repositoryRawHosted:RepositoryRawHosted":
                return new RepositoryRawHosted(name, <any>undefined, { urn })
            case "nexus:index/repositoryRawProxy:RepositoryRawProxy":
                return new RepositoryRawProxy(name, <any>undefined, { urn })
            case "nexus:index/repositoryRubygemsGroup:RepositoryRubygemsGroup":
                return new RepositoryRubygemsGroup(name, <any>undefined, { urn })
            case "nexus:index/repositoryRubygemsHosted:RepositoryRubygemsHosted":
                return new RepositoryRubygemsHosted(name, <any>undefined, { urn })
            case "nexus:index/repositoryRubygemsProxy:RepositoryRubygemsProxy":
                return new RepositoryRubygemsProxy(name, <any>undefined, { urn })
            case "nexus:index/repositoryYumGroup:RepositoryYumGroup":
                return new RepositoryYumGroup(name, <any>undefined, { urn })
            case "nexus:index/repositoryYumHosted:RepositoryYumHosted":
                return new RepositoryYumHosted(name, <any>undefined, { urn })
            case "nexus:index/repositoryYumProxy:RepositoryYumProxy":
                return new RepositoryYumProxy(name, <any>undefined, { urn })
            case "nexus:index/routingRule:RoutingRule":
                return new RoutingRule(name, <any>undefined, { urn })
            case "nexus:index/script:Script":
                return new Script(name, <any>undefined, { urn })
            case "nexus:index/securityAnonymous:SecurityAnonymous":
                return new SecurityAnonymous(name, <any>undefined, { urn })
            case "nexus:index/securityContentSelector:SecurityContentSelector":
                return new SecurityContentSelector(name, <any>undefined, { urn })
            case "nexus:index/securityLdap:SecurityLdap":
                return new SecurityLdap(name, <any>undefined, { urn })
            case "nexus:index/securityLdapOrder:SecurityLdapOrder":
                return new SecurityLdapOrder(name, <any>undefined, { urn })
            case "nexus:index/securityRealms:SecurityRealms":
                return new SecurityRealms(name, <any>undefined, { urn })
            case "nexus:index/securityRole:SecurityRole":
                return new SecurityRole(name, <any>undefined, { urn })
            case "nexus:index/securitySaml:SecuritySaml":
                return new SecuritySaml(name, <any>undefined, { urn })
            case "nexus:index/securitySslTruststore:SecuritySslTruststore":
                return new SecuritySslTruststore(name, <any>undefined, { urn })
            case "nexus:index/securityUser:SecurityUser":
                return new SecurityUser(name, <any>undefined, { urn })
            case "nexus:index/securityUserToken:SecurityUserToken":
                return new SecurityUserToken(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("nexus", "index/blobstoreAzure", _module)
pulumi.runtime.registerResourceModule("nexus", "index/blobstoreFile", _module)
pulumi.runtime.registerResourceModule("nexus", "index/blobstoreGroup", _module)
pulumi.runtime.registerResourceModule("nexus", "index/blobstoreS3", _module)
pulumi.runtime.registerResourceModule("nexus", "index/mailConfig", _module)
pulumi.runtime.registerResourceModule("nexus", "index/privilegeApplication", _module)
pulumi.runtime.registerResourceModule("nexus", "index/privilegeRepositoryAdmin", _module)
pulumi.runtime.registerResourceModule("nexus", "index/privilegeRepositoryContentSelector", _module)
pulumi.runtime.registerResourceModule("nexus", "index/privilegeRepositoryView", _module)
pulumi.runtime.registerResourceModule("nexus", "index/privilegeScript", _module)
pulumi.runtime.registerResourceModule("nexus", "index/privilegeWildcard", _module)
pulumi.runtime.registerResourceModule("nexus", "index/repositoryAptHosted", _module)
pulumi.runtime.registerResourceModule("nexus", "index/repositoryAptProxy", _module)
pulumi.runtime.registerResourceModule("nexus", "index/repositoryBowerGroup", _module)
pulumi.runtime.registerResourceModule("nexus", "index/repositoryBowerHosted", _module)
pulumi.runtime.registerResourceModule("nexus", "index/repositoryBowerProxy", _module)
pulumi.runtime.registerResourceModule("nexus", "index/repositoryCargoGroup", _module)
pulumi.runtime.registerResourceModule("nexus", "index/repositoryCargoHosted", _module)
pulumi.runtime.registerResourceModule("nexus", "index/repositoryCargoProxy", _module)
pulumi.runtime.registerResourceModule("nexus", "index/repositoryCocoapodsProxy", _module)
pulumi.runtime.registerResourceModule("nexus", "index/repositoryConanProxy", _module)
pulumi.runtime.registerResourceModule("nexus", "index/repositoryCondaProxy", _module)
pulumi.runtime.registerResourceModule("nexus", "index/repositoryDockerGroup", _module)
pulumi.runtime.registerResourceModule("nexus", "index/repositoryDockerHosted", _module)
pulumi.runtime.registerResourceModule("nexus", "index/repositoryDockerProxy", _module)
pulumi.runtime.registerResourceModule("nexus", "index/repositoryGitlfsHosted", _module)
pulumi.runtime.registerResourceModule("nexus", "index/repositoryGoGroup", _module)
pulumi.runtime.registerResourceModule("nexus", "index/repositoryGoProxy", _module)
pulumi.runtime.registerResourceModule("nexus", "index/repositoryHelmHosted", _module)
pulumi.runtime.registerResourceModule("nexus", "index/repositoryHelmProxy", _module)
pulumi.runtime.registerResourceModule("nexus", "index/repositoryMavenGroup", _module)
pulumi.runtime.registerResourceModule("nexus", "index/repositoryMavenHosted", _module)
pulumi.runtime.registerResourceModule("nexus", "index/repositoryMavenProxy", _module)
pulumi.runtime.registerResourceModule("nexus", "index/repositoryNpmGroup", _module)
pulumi.runtime.registerResourceModule("nexus", "index/repositoryNpmHosted", _module)
pulumi.runtime.registerResourceModule("nexus", "index/repositoryNpmProxy", _module)
pulumi.runtime.registerResourceModule("nexus", "index/repositoryNugetGroup", _module)
pulumi.runtime.registerResourceModule("nexus", "index/repositoryNugetHosted", _module)
pulumi.runtime.registerResourceModule("nexus", "index/repositoryNugetProxy", _module)
pulumi.runtime.registerResourceModule("nexus", "index/repositoryP2Proxy", _module)
pulumi.runtime.registerResourceModule("nexus", "index/repositoryPypiGroup", _module)
pulumi.runtime.registerResourceModule("nexus", "index/repositoryPypiHosted", _module)
pulumi.runtime.registerResourceModule("nexus", "index/repositoryPypiProxy", _module)
pulumi.runtime.registerResourceModule("nexus", "index/repositoryRGroup", _module)
pulumi.runtime.registerResourceModule("nexus", "index/repositoryRHosted", _module)
pulumi.runtime.registerResourceModule("nexus", "index/repositoryRProxy", _module)
pulumi.runtime.registerResourceModule("nexus", "index/repositoryRawGroup", _module)
pulumi.runtime.registerResourceModule("nexus", "index/repositoryRawHosted", _module)
pulumi.runtime.registerResourceModule("nexus", "index/repositoryRawProxy", _module)
pulumi.runtime.registerResourceModule("nexus", "index/repositoryRubygemsGroup", _module)
pulumi.runtime.registerResourceModule("nexus", "index/repositoryRubygemsHosted", _module)
pulumi.runtime.registerResourceModule("nexus", "index/repositoryRubygemsProxy", _module)
pulumi.runtime.registerResourceModule("nexus", "index/repositoryYumGroup", _module)
pulumi.runtime.registerResourceModule("nexus", "index/repositoryYumHosted", _module)
pulumi.runtime.registerResourceModule("nexus", "index/repositoryYumProxy", _module)
pulumi.runtime.registerResourceModule("nexus", "index/routingRule", _module)
pulumi.runtime.registerResourceModule("nexus", "index/script", _module)
pulumi.runtime.registerResourceModule("nexus", "index/securityAnonymous", _module)
pulumi.runtime.registerResourceModule("nexus", "index/securityContentSelector", _module)
pulumi.runtime.registerResourceModule("nexus", "index/securityLdap", _module)
pulumi.runtime.registerResourceModule("nexus", "index/securityLdapOrder", _module)
pulumi.runtime.registerResourceModule("nexus", "index/securityRealms", _module)
pulumi.runtime.registerResourceModule("nexus", "index/securityRole", _module)
pulumi.runtime.registerResourceModule("nexus", "index/securitySaml", _module)
pulumi.runtime.registerResourceModule("nexus", "index/securitySslTruststore", _module)
pulumi.runtime.registerResourceModule("nexus", "index/securityUser", _module)
pulumi.runtime.registerResourceModule("nexus", "index/securityUserToken", _module)
pulumi.runtime.registerResourcePackage("nexus", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:nexus") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
