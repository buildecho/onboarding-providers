// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class BlobstoreGroup extends pulumi.CustomResource {
    /**
     * Get an existing BlobstoreGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: BlobstoreGroupState, opts?: pulumi.CustomResourceOptions): BlobstoreGroup {
        return new BlobstoreGroup(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'nexus:index/blobstoreGroup:BlobstoreGroup';

    /**
     * Returns true if the given object is an instance of BlobstoreGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is BlobstoreGroup {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === BlobstoreGroup.__pulumiType;
    }

    /**
     * Available space in Bytes
     */
    public /*out*/ readonly availableSpaceInBytes!: pulumi.Output<number>;
    /**
     * Count of blobs
     */
    public /*out*/ readonly blobCount!: pulumi.Output<number>;
    /**
     * The policy how to fill the members. Possible values: `roundRobin` or `writeToFirst`
     */
    public readonly fillPolicy!: pulumi.Output<string>;
    /**
     * List of the names of blob stores that are members of this group
     */
    public readonly members!: pulumi.Output<string[]>;
    /**
     * Blobstore name
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Soft quota of the blobstore
     */
    public readonly softQuota!: pulumi.Output<outputs.BlobstoreGroupSoftQuota | undefined>;
    /**
     * The total size of the blobstore in Bytes
     */
    public /*out*/ readonly totalSizeInBytes!: pulumi.Output<number>;

    /**
     * Create a BlobstoreGroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: BlobstoreGroupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: BlobstoreGroupArgs | BlobstoreGroupState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as BlobstoreGroupState | undefined;
            resourceInputs["availableSpaceInBytes"] = state ? state.availableSpaceInBytes : undefined;
            resourceInputs["blobCount"] = state ? state.blobCount : undefined;
            resourceInputs["fillPolicy"] = state ? state.fillPolicy : undefined;
            resourceInputs["members"] = state ? state.members : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["softQuota"] = state ? state.softQuota : undefined;
            resourceInputs["totalSizeInBytes"] = state ? state.totalSizeInBytes : undefined;
        } else {
            const args = argsOrState as BlobstoreGroupArgs | undefined;
            if ((!args || args.fillPolicy === undefined) && !opts.urn) {
                throw new Error("Missing required property 'fillPolicy'");
            }
            if ((!args || args.members === undefined) && !opts.urn) {
                throw new Error("Missing required property 'members'");
            }
            resourceInputs["fillPolicy"] = args ? args.fillPolicy : undefined;
            resourceInputs["members"] = args ? args.members : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["softQuota"] = args ? args.softQuota : undefined;
            resourceInputs["availableSpaceInBytes"] = undefined /*out*/;
            resourceInputs["blobCount"] = undefined /*out*/;
            resourceInputs["totalSizeInBytes"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(BlobstoreGroup.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering BlobstoreGroup resources.
 */
export interface BlobstoreGroupState {
    /**
     * Available space in Bytes
     */
    availableSpaceInBytes?: pulumi.Input<number>;
    /**
     * Count of blobs
     */
    blobCount?: pulumi.Input<number>;
    /**
     * The policy how to fill the members. Possible values: `roundRobin` or `writeToFirst`
     */
    fillPolicy?: pulumi.Input<string>;
    /**
     * List of the names of blob stores that are members of this group
     */
    members?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Blobstore name
     */
    name?: pulumi.Input<string>;
    /**
     * Soft quota of the blobstore
     */
    softQuota?: pulumi.Input<inputs.BlobstoreGroupSoftQuota>;
    /**
     * The total size of the blobstore in Bytes
     */
    totalSizeInBytes?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a BlobstoreGroup resource.
 */
export interface BlobstoreGroupArgs {
    /**
     * The policy how to fill the members. Possible values: `roundRobin` or `writeToFirst`
     */
    fillPolicy: pulumi.Input<string>;
    /**
     * List of the names of blob stores that are members of this group
     */
    members: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Blobstore name
     */
    name?: pulumi.Input<string>;
    /**
     * Soft quota of the blobstore
     */
    softQuota?: pulumi.Input<inputs.BlobstoreGroupSoftQuota>;
}
