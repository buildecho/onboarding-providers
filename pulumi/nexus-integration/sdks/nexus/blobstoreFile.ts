// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class BlobstoreFile extends pulumi.CustomResource {
    /**
     * Get an existing BlobstoreFile resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: BlobstoreFileState, opts?: pulumi.CustomResourceOptions): BlobstoreFile {
        return new BlobstoreFile(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'nexus:index/blobstoreFile:BlobstoreFile';

    /**
     * Returns true if the given object is an instance of BlobstoreFile.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is BlobstoreFile {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === BlobstoreFile.__pulumiType;
    }

    /**
     * Available space in Bytes
     */
    public /*out*/ readonly availableSpaceInBytes!: pulumi.Output<number>;
    /**
     * Count of blobs
     */
    public /*out*/ readonly blobCount!: pulumi.Output<number>;
    /**
     * Blobstore name
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The path to the blobstore contents. This can be an absolute path to anywhere on the system nxrm has access to or it can
     * be a path relative to the sonatype-work directory
     */
    public readonly path!: pulumi.Output<string | undefined>;
    /**
     * Soft quota of the blobstore
     */
    public readonly softQuota!: pulumi.Output<outputs.BlobstoreFileSoftQuota | undefined>;
    /**
     * The total size of the blobstore in Bytes
     */
    public /*out*/ readonly totalSizeInBytes!: pulumi.Output<number>;

    /**
     * Create a BlobstoreFile resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: BlobstoreFileArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: BlobstoreFileArgs | BlobstoreFileState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as BlobstoreFileState | undefined;
            resourceInputs["availableSpaceInBytes"] = state ? state.availableSpaceInBytes : undefined;
            resourceInputs["blobCount"] = state ? state.blobCount : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["path"] = state ? state.path : undefined;
            resourceInputs["softQuota"] = state ? state.softQuota : undefined;
            resourceInputs["totalSizeInBytes"] = state ? state.totalSizeInBytes : undefined;
        } else {
            const args = argsOrState as BlobstoreFileArgs | undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["path"] = args ? args.path : undefined;
            resourceInputs["softQuota"] = args ? args.softQuota : undefined;
            resourceInputs["availableSpaceInBytes"] = undefined /*out*/;
            resourceInputs["blobCount"] = undefined /*out*/;
            resourceInputs["totalSizeInBytes"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(BlobstoreFile.__pulumiType, name, resourceInputs, opts, false /*dependency*/, utilities.getPackage());
    }
}

/**
 * Input properties used for looking up and filtering BlobstoreFile resources.
 */
export interface BlobstoreFileState {
    /**
     * Available space in Bytes
     */
    availableSpaceInBytes?: pulumi.Input<number>;
    /**
     * Count of blobs
     */
    blobCount?: pulumi.Input<number>;
    /**
     * Blobstore name
     */
    name?: pulumi.Input<string>;
    /**
     * The path to the blobstore contents. This can be an absolute path to anywhere on the system nxrm has access to or it can
     * be a path relative to the sonatype-work directory
     */
    path?: pulumi.Input<string>;
    /**
     * Soft quota of the blobstore
     */
    softQuota?: pulumi.Input<inputs.BlobstoreFileSoftQuota>;
    /**
     * The total size of the blobstore in Bytes
     */
    totalSizeInBytes?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a BlobstoreFile resource.
 */
export interface BlobstoreFileArgs {
    /**
     * Blobstore name
     */
    name?: pulumi.Input<string>;
    /**
     * The path to the blobstore contents. This can be an absolute path to anywhere on the system nxrm has access to or it can
     * be a path relative to the sonatype-work directory
     */
    path?: pulumi.Input<string>;
    /**
     * Soft quota of the blobstore
     */
    softQuota?: pulumi.Input<inputs.BlobstoreFileSoftQuota>;
}
