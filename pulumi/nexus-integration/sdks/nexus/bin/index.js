"use strict";
// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getRepositoryCondaProxyOutput = exports.getRepositoryCondaProxy = exports.getRepositoryConanProxyOutput = exports.getRepositoryConanProxy = exports.getRepositoryCocoapodsProxyOutput = exports.getRepositoryCocoapodsProxy = exports.getRepositoryCargoProxyOutput = exports.getRepositoryCargoProxy = exports.getRepositoryCargoHostedOutput = exports.getRepositoryCargoHosted = exports.getRepositoryCargoGroupOutput = exports.getRepositoryCargoGroup = exports.getRepositoryBowerProxyOutput = exports.getRepositoryBowerProxy = exports.getRepositoryBowerHostedOutput = exports.getRepositoryBowerHosted = exports.getRepositoryBowerGroupOutput = exports.getRepositoryBowerGroup = exports.getRepositoryAptProxyOutput = exports.getRepositoryAptProxy = exports.getRepositoryAptHostedOutput = exports.getRepositoryAptHosted = exports.getPrivilegeWildcardOutput = exports.getPrivilegeWildcard = exports.getPrivilegeScriptOutput = exports.getPrivilegeScript = exports.getPrivilegeRepositoryViewOutput = exports.getPrivilegeRepositoryView = exports.getPrivilegeRepositoryContentSelectorOutput = exports.getPrivilegeRepositoryContentSelector = exports.getPrivilegeRepositoryAdminOutput = exports.getPrivilegeRepositoryAdmin = exports.getPrivilegeApplicationOutput = exports.getPrivilegeApplication = exports.getMailConfigOutput = exports.getMailConfig = exports.getBlobstoreS3Output = exports.getBlobstoreS3 = exports.getBlobstoreListOutput = exports.getBlobstoreList = exports.getBlobstoreGroupOutput = exports.getBlobstoreGroup = exports.getBlobstoreFileOutput = exports.getBlobstoreFile = exports.getBlobstoreAzureOutput = exports.getBlobstoreAzure = exports.BlobstoreS3 = exports.BlobstoreGroup = exports.BlobstoreFile = exports.BlobstoreAzure = void 0;
exports.getRepositoryRProxyOutput = exports.getRepositoryRProxy = exports.getRepositoryRHostedOutput = exports.getRepositoryRHosted = exports.getRepositoryRGroupOutput = exports.getRepositoryRGroup = exports.getRepositoryPypiProxyOutput = exports.getRepositoryPypiProxy = exports.getRepositoryPypiHostedOutput = exports.getRepositoryPypiHosted = exports.getRepositoryPypiGroupOutput = exports.getRepositoryPypiGroup = exports.getRepositoryP2ProxyOutput = exports.getRepositoryP2Proxy = exports.getRepositoryNugetProxyOutput = exports.getRepositoryNugetProxy = exports.getRepositoryNugetHostedOutput = exports.getRepositoryNugetHosted = exports.getRepositoryNugetGroupOutput = exports.getRepositoryNugetGroup = exports.getRepositoryNpmProxyOutput = exports.getRepositoryNpmProxy = exports.getRepositoryNpmHostedOutput = exports.getRepositoryNpmHosted = exports.getRepositoryNpmGroupOutput = exports.getRepositoryNpmGroup = exports.getRepositoryMavenProxyOutput = exports.getRepositoryMavenProxy = exports.getRepositoryMavenHostedOutput = exports.getRepositoryMavenHosted = exports.getRepositoryMavenGroupOutput = exports.getRepositoryMavenGroup = exports.getRepositoryListOutput = exports.getRepositoryList = exports.getRepositoryHelmProxyOutput = exports.getRepositoryHelmProxy = exports.getRepositoryHelmHostedOutput = exports.getRepositoryHelmHosted = exports.getRepositoryGoProxyOutput = exports.getRepositoryGoProxy = exports.getRepositoryGoGroupOutput = exports.getRepositoryGoGroup = exports.getRepositoryGitlfsHostedOutput = exports.getRepositoryGitlfsHosted = exports.getRepositoryDockerProxyOutput = exports.getRepositoryDockerProxy = exports.getRepositoryDockerHostedOutput = exports.getRepositoryDockerHosted = exports.getRepositoryDockerGroupOutput = exports.getRepositoryDockerGroup = void 0;
exports.RepositoryBowerGroup = exports.RepositoryAptProxy = exports.RepositoryAptHosted = exports.PrivilegeWildcard = exports.PrivilegeScript = exports.PrivilegeRepositoryView = exports.PrivilegeRepositoryContentSelector = exports.PrivilegeRepositoryAdmin = exports.PrivilegeApplication = exports.MailConfig = exports.getSecurityUserTokenOutput = exports.getSecurityUserToken = exports.getSecurityUserOutput = exports.getSecurityUser = exports.getSecuritySslTruststoreOutput = exports.getSecuritySslTruststore = exports.getSecuritySslOutput = exports.getSecuritySsl = exports.getSecuritySamlOutput = exports.getSecuritySaml = exports.getSecurityRoleOutput = exports.getSecurityRole = exports.getSecurityRealmsOutput = exports.getSecurityRealms = exports.getSecurityLdapOutput = exports.getSecurityLdap = exports.getSecurityContentSelectorOutput = exports.getSecurityContentSelector = exports.getSecurityAnonymousOutput = exports.getSecurityAnonymous = exports.getRoutingRuleOutput = exports.getRoutingRule = exports.getRepositoryYumProxyOutput = exports.getRepositoryYumProxy = exports.getRepositoryYumHostedOutput = exports.getRepositoryYumHosted = exports.getRepositoryYumGroupOutput = exports.getRepositoryYumGroup = exports.getRepositoryRubygemsProxyOutput = exports.getRepositoryRubygemsProxy = exports.getRepositoryRubygemsHostedOutput = exports.getRepositoryRubygemsHosted = exports.getRepositoryRubygemsGroupOutput = exports.getRepositoryRubygemsGroup = exports.getRepositoryRawProxyOutput = exports.getRepositoryRawProxy = exports.getRepositoryRawHostedOutput = exports.getRepositoryRawHosted = exports.getRepositoryRawGroupOutput = exports.getRepositoryRawGroup = void 0;
exports.SecuritySaml = exports.SecurityRole = exports.SecurityRealms = exports.SecurityLdapOrder = exports.SecurityLdap = exports.SecurityContentSelector = exports.SecurityAnonymous = exports.Script = exports.RoutingRule = exports.RepositoryYumProxy = exports.RepositoryYumHosted = exports.RepositoryYumGroup = exports.RepositoryRubygemsProxy = exports.RepositoryRubygemsHosted = exports.RepositoryRubygemsGroup = exports.RepositoryRawProxy = exports.RepositoryRawHosted = exports.RepositoryRawGroup = exports.RepositoryRProxy = exports.RepositoryRHosted = exports.RepositoryRGroup = exports.RepositoryPypiProxy = exports.RepositoryPypiHosted = exports.RepositoryPypiGroup = exports.RepositoryP2Proxy = exports.RepositoryNugetProxy = exports.RepositoryNugetHosted = exports.RepositoryNugetGroup = exports.RepositoryNpmProxy = exports.RepositoryNpmHosted = exports.RepositoryNpmGroup = exports.RepositoryMavenProxy = exports.RepositoryMavenHosted = exports.RepositoryMavenGroup = exports.RepositoryHelmProxy = exports.RepositoryHelmHosted = exports.RepositoryGoProxy = exports.RepositoryGoGroup = exports.RepositoryGitlfsHosted = exports.RepositoryDockerProxy = exports.RepositoryDockerHosted = exports.RepositoryDockerGroup = exports.RepositoryCondaProxy = exports.RepositoryConanProxy = exports.RepositoryCocoapodsProxy = exports.RepositoryCargoProxy = exports.RepositoryCargoHosted = exports.RepositoryCargoGroup = exports.RepositoryBowerProxy = exports.RepositoryBowerHosted = void 0;
exports.types = exports.config = exports.SecurityUserToken = exports.SecurityUser = exports.SecuritySslTruststore = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
exports.BlobstoreAzure = null;
utilities.lazyLoad(exports, ["BlobstoreAzure"], () => require("./blobstoreAzure"));
exports.BlobstoreFile = null;
utilities.lazyLoad(exports, ["BlobstoreFile"], () => require("./blobstoreFile"));
exports.BlobstoreGroup = null;
utilities.lazyLoad(exports, ["BlobstoreGroup"], () => require("./blobstoreGroup"));
exports.BlobstoreS3 = null;
utilities.lazyLoad(exports, ["BlobstoreS3"], () => require("./blobstoreS3"));
exports.getBlobstoreAzure = null;
exports.getBlobstoreAzureOutput = null;
utilities.lazyLoad(exports, ["getBlobstoreAzure", "getBlobstoreAzureOutput"], () => require("./getBlobstoreAzure"));
exports.getBlobstoreFile = null;
exports.getBlobstoreFileOutput = null;
utilities.lazyLoad(exports, ["getBlobstoreFile", "getBlobstoreFileOutput"], () => require("./getBlobstoreFile"));
exports.getBlobstoreGroup = null;
exports.getBlobstoreGroupOutput = null;
utilities.lazyLoad(exports, ["getBlobstoreGroup", "getBlobstoreGroupOutput"], () => require("./getBlobstoreGroup"));
exports.getBlobstoreList = null;
exports.getBlobstoreListOutput = null;
utilities.lazyLoad(exports, ["getBlobstoreList", "getBlobstoreListOutput"], () => require("./getBlobstoreList"));
exports.getBlobstoreS3 = null;
exports.getBlobstoreS3Output = null;
utilities.lazyLoad(exports, ["getBlobstoreS3", "getBlobstoreS3Output"], () => require("./getBlobstoreS3"));
exports.getMailConfig = null;
exports.getMailConfigOutput = null;
utilities.lazyLoad(exports, ["getMailConfig", "getMailConfigOutput"], () => require("./getMailConfig"));
exports.getPrivilegeApplication = null;
exports.getPrivilegeApplicationOutput = null;
utilities.lazyLoad(exports, ["getPrivilegeApplication", "getPrivilegeApplicationOutput"], () => require("./getPrivilegeApplication"));
exports.getPrivilegeRepositoryAdmin = null;
exports.getPrivilegeRepositoryAdminOutput = null;
utilities.lazyLoad(exports, ["getPrivilegeRepositoryAdmin", "getPrivilegeRepositoryAdminOutput"], () => require("./getPrivilegeRepositoryAdmin"));
exports.getPrivilegeRepositoryContentSelector = null;
exports.getPrivilegeRepositoryContentSelectorOutput = null;
utilities.lazyLoad(exports, ["getPrivilegeRepositoryContentSelector", "getPrivilegeRepositoryContentSelectorOutput"], () => require("./getPrivilegeRepositoryContentSelector"));
exports.getPrivilegeRepositoryView = null;
exports.getPrivilegeRepositoryViewOutput = null;
utilities.lazyLoad(exports, ["getPrivilegeRepositoryView", "getPrivilegeRepositoryViewOutput"], () => require("./getPrivilegeRepositoryView"));
exports.getPrivilegeScript = null;
exports.getPrivilegeScriptOutput = null;
utilities.lazyLoad(exports, ["getPrivilegeScript", "getPrivilegeScriptOutput"], () => require("./getPrivilegeScript"));
exports.getPrivilegeWildcard = null;
exports.getPrivilegeWildcardOutput = null;
utilities.lazyLoad(exports, ["getPrivilegeWildcard", "getPrivilegeWildcardOutput"], () => require("./getPrivilegeWildcard"));
exports.getRepositoryAptHosted = null;
exports.getRepositoryAptHostedOutput = null;
utilities.lazyLoad(exports, ["getRepositoryAptHosted", "getRepositoryAptHostedOutput"], () => require("./getRepositoryAptHosted"));
exports.getRepositoryAptProxy = null;
exports.getRepositoryAptProxyOutput = null;
utilities.lazyLoad(exports, ["getRepositoryAptProxy", "getRepositoryAptProxyOutput"], () => require("./getRepositoryAptProxy"));
exports.getRepositoryBowerGroup = null;
exports.getRepositoryBowerGroupOutput = null;
utilities.lazyLoad(exports, ["getRepositoryBowerGroup", "getRepositoryBowerGroupOutput"], () => require("./getRepositoryBowerGroup"));
exports.getRepositoryBowerHosted = null;
exports.getRepositoryBowerHostedOutput = null;
utilities.lazyLoad(exports, ["getRepositoryBowerHosted", "getRepositoryBowerHostedOutput"], () => require("./getRepositoryBowerHosted"));
exports.getRepositoryBowerProxy = null;
exports.getRepositoryBowerProxyOutput = null;
utilities.lazyLoad(exports, ["getRepositoryBowerProxy", "getRepositoryBowerProxyOutput"], () => require("./getRepositoryBowerProxy"));
exports.getRepositoryCargoGroup = null;
exports.getRepositoryCargoGroupOutput = null;
utilities.lazyLoad(exports, ["getRepositoryCargoGroup", "getRepositoryCargoGroupOutput"], () => require("./getRepositoryCargoGroup"));
exports.getRepositoryCargoHosted = null;
exports.getRepositoryCargoHostedOutput = null;
utilities.lazyLoad(exports, ["getRepositoryCargoHosted", "getRepositoryCargoHostedOutput"], () => require("./getRepositoryCargoHosted"));
exports.getRepositoryCargoProxy = null;
exports.getRepositoryCargoProxyOutput = null;
utilities.lazyLoad(exports, ["getRepositoryCargoProxy", "getRepositoryCargoProxyOutput"], () => require("./getRepositoryCargoProxy"));
exports.getRepositoryCocoapodsProxy = null;
exports.getRepositoryCocoapodsProxyOutput = null;
utilities.lazyLoad(exports, ["getRepositoryCocoapodsProxy", "getRepositoryCocoapodsProxyOutput"], () => require("./getRepositoryCocoapodsProxy"));
exports.getRepositoryConanProxy = null;
exports.getRepositoryConanProxyOutput = null;
utilities.lazyLoad(exports, ["getRepositoryConanProxy", "getRepositoryConanProxyOutput"], () => require("./getRepositoryConanProxy"));
exports.getRepositoryCondaProxy = null;
exports.getRepositoryCondaProxyOutput = null;
utilities.lazyLoad(exports, ["getRepositoryCondaProxy", "getRepositoryCondaProxyOutput"], () => require("./getRepositoryCondaProxy"));
exports.getRepositoryDockerGroup = null;
exports.getRepositoryDockerGroupOutput = null;
utilities.lazyLoad(exports, ["getRepositoryDockerGroup", "getRepositoryDockerGroupOutput"], () => require("./getRepositoryDockerGroup"));
exports.getRepositoryDockerHosted = null;
exports.getRepositoryDockerHostedOutput = null;
utilities.lazyLoad(exports, ["getRepositoryDockerHosted", "getRepositoryDockerHostedOutput"], () => require("./getRepositoryDockerHosted"));
exports.getRepositoryDockerProxy = null;
exports.getRepositoryDockerProxyOutput = null;
utilities.lazyLoad(exports, ["getRepositoryDockerProxy", "getRepositoryDockerProxyOutput"], () => require("./getRepositoryDockerProxy"));
exports.getRepositoryGitlfsHosted = null;
exports.getRepositoryGitlfsHostedOutput = null;
utilities.lazyLoad(exports, ["getRepositoryGitlfsHosted", "getRepositoryGitlfsHostedOutput"], () => require("./getRepositoryGitlfsHosted"));
exports.getRepositoryGoGroup = null;
exports.getRepositoryGoGroupOutput = null;
utilities.lazyLoad(exports, ["getRepositoryGoGroup", "getRepositoryGoGroupOutput"], () => require("./getRepositoryGoGroup"));
exports.getRepositoryGoProxy = null;
exports.getRepositoryGoProxyOutput = null;
utilities.lazyLoad(exports, ["getRepositoryGoProxy", "getRepositoryGoProxyOutput"], () => require("./getRepositoryGoProxy"));
exports.getRepositoryHelmHosted = null;
exports.getRepositoryHelmHostedOutput = null;
utilities.lazyLoad(exports, ["getRepositoryHelmHosted", "getRepositoryHelmHostedOutput"], () => require("./getRepositoryHelmHosted"));
exports.getRepositoryHelmProxy = null;
exports.getRepositoryHelmProxyOutput = null;
utilities.lazyLoad(exports, ["getRepositoryHelmProxy", "getRepositoryHelmProxyOutput"], () => require("./getRepositoryHelmProxy"));
exports.getRepositoryList = null;
exports.getRepositoryListOutput = null;
utilities.lazyLoad(exports, ["getRepositoryList", "getRepositoryListOutput"], () => require("./getRepositoryList"));
exports.getRepositoryMavenGroup = null;
exports.getRepositoryMavenGroupOutput = null;
utilities.lazyLoad(exports, ["getRepositoryMavenGroup", "getRepositoryMavenGroupOutput"], () => require("./getRepositoryMavenGroup"));
exports.getRepositoryMavenHosted = null;
exports.getRepositoryMavenHostedOutput = null;
utilities.lazyLoad(exports, ["getRepositoryMavenHosted", "getRepositoryMavenHostedOutput"], () => require("./getRepositoryMavenHosted"));
exports.getRepositoryMavenProxy = null;
exports.getRepositoryMavenProxyOutput = null;
utilities.lazyLoad(exports, ["getRepositoryMavenProxy", "getRepositoryMavenProxyOutput"], () => require("./getRepositoryMavenProxy"));
exports.getRepositoryNpmGroup = null;
exports.getRepositoryNpmGroupOutput = null;
utilities.lazyLoad(exports, ["getRepositoryNpmGroup", "getRepositoryNpmGroupOutput"], () => require("./getRepositoryNpmGroup"));
exports.getRepositoryNpmHosted = null;
exports.getRepositoryNpmHostedOutput = null;
utilities.lazyLoad(exports, ["getRepositoryNpmHosted", "getRepositoryNpmHostedOutput"], () => require("./getRepositoryNpmHosted"));
exports.getRepositoryNpmProxy = null;
exports.getRepositoryNpmProxyOutput = null;
utilities.lazyLoad(exports, ["getRepositoryNpmProxy", "getRepositoryNpmProxyOutput"], () => require("./getRepositoryNpmProxy"));
exports.getRepositoryNugetGroup = null;
exports.getRepositoryNugetGroupOutput = null;
utilities.lazyLoad(exports, ["getRepositoryNugetGroup", "getRepositoryNugetGroupOutput"], () => require("./getRepositoryNugetGroup"));
exports.getRepositoryNugetHosted = null;
exports.getRepositoryNugetHostedOutput = null;
utilities.lazyLoad(exports, ["getRepositoryNugetHosted", "getRepositoryNugetHostedOutput"], () => require("./getRepositoryNugetHosted"));
exports.getRepositoryNugetProxy = null;
exports.getRepositoryNugetProxyOutput = null;
utilities.lazyLoad(exports, ["getRepositoryNugetProxy", "getRepositoryNugetProxyOutput"], () => require("./getRepositoryNugetProxy"));
exports.getRepositoryP2Proxy = null;
exports.getRepositoryP2ProxyOutput = null;
utilities.lazyLoad(exports, ["getRepositoryP2Proxy", "getRepositoryP2ProxyOutput"], () => require("./getRepositoryP2Proxy"));
exports.getRepositoryPypiGroup = null;
exports.getRepositoryPypiGroupOutput = null;
utilities.lazyLoad(exports, ["getRepositoryPypiGroup", "getRepositoryPypiGroupOutput"], () => require("./getRepositoryPypiGroup"));
exports.getRepositoryPypiHosted = null;
exports.getRepositoryPypiHostedOutput = null;
utilities.lazyLoad(exports, ["getRepositoryPypiHosted", "getRepositoryPypiHostedOutput"], () => require("./getRepositoryPypiHosted"));
exports.getRepositoryPypiProxy = null;
exports.getRepositoryPypiProxyOutput = null;
utilities.lazyLoad(exports, ["getRepositoryPypiProxy", "getRepositoryPypiProxyOutput"], () => require("./getRepositoryPypiProxy"));
exports.getRepositoryRGroup = null;
exports.getRepositoryRGroupOutput = null;
utilities.lazyLoad(exports, ["getRepositoryRGroup", "getRepositoryRGroupOutput"], () => require("./getRepositoryRGroup"));
exports.getRepositoryRHosted = null;
exports.getRepositoryRHostedOutput = null;
utilities.lazyLoad(exports, ["getRepositoryRHosted", "getRepositoryRHostedOutput"], () => require("./getRepositoryRHosted"));
exports.getRepositoryRProxy = null;
exports.getRepositoryRProxyOutput = null;
utilities.lazyLoad(exports, ["getRepositoryRProxy", "getRepositoryRProxyOutput"], () => require("./getRepositoryRProxy"));
exports.getRepositoryRawGroup = null;
exports.getRepositoryRawGroupOutput = null;
utilities.lazyLoad(exports, ["getRepositoryRawGroup", "getRepositoryRawGroupOutput"], () => require("./getRepositoryRawGroup"));
exports.getRepositoryRawHosted = null;
exports.getRepositoryRawHostedOutput = null;
utilities.lazyLoad(exports, ["getRepositoryRawHosted", "getRepositoryRawHostedOutput"], () => require("./getRepositoryRawHosted"));
exports.getRepositoryRawProxy = null;
exports.getRepositoryRawProxyOutput = null;
utilities.lazyLoad(exports, ["getRepositoryRawProxy", "getRepositoryRawProxyOutput"], () => require("./getRepositoryRawProxy"));
exports.getRepositoryRubygemsGroup = null;
exports.getRepositoryRubygemsGroupOutput = null;
utilities.lazyLoad(exports, ["getRepositoryRubygemsGroup", "getRepositoryRubygemsGroupOutput"], () => require("./getRepositoryRubygemsGroup"));
exports.getRepositoryRubygemsHosted = null;
exports.getRepositoryRubygemsHostedOutput = null;
utilities.lazyLoad(exports, ["getRepositoryRubygemsHosted", "getRepositoryRubygemsHostedOutput"], () => require("./getRepositoryRubygemsHosted"));
exports.getRepositoryRubygemsProxy = null;
exports.getRepositoryRubygemsProxyOutput = null;
utilities.lazyLoad(exports, ["getRepositoryRubygemsProxy", "getRepositoryRubygemsProxyOutput"], () => require("./getRepositoryRubygemsProxy"));
exports.getRepositoryYumGroup = null;
exports.getRepositoryYumGroupOutput = null;
utilities.lazyLoad(exports, ["getRepositoryYumGroup", "getRepositoryYumGroupOutput"], () => require("./getRepositoryYumGroup"));
exports.getRepositoryYumHosted = null;
exports.getRepositoryYumHostedOutput = null;
utilities.lazyLoad(exports, ["getRepositoryYumHosted", "getRepositoryYumHostedOutput"], () => require("./getRepositoryYumHosted"));
exports.getRepositoryYumProxy = null;
exports.getRepositoryYumProxyOutput = null;
utilities.lazyLoad(exports, ["getRepositoryYumProxy", "getRepositoryYumProxyOutput"], () => require("./getRepositoryYumProxy"));
exports.getRoutingRule = null;
exports.getRoutingRuleOutput = null;
utilities.lazyLoad(exports, ["getRoutingRule", "getRoutingRuleOutput"], () => require("./getRoutingRule"));
exports.getSecurityAnonymous = null;
exports.getSecurityAnonymousOutput = null;
utilities.lazyLoad(exports, ["getSecurityAnonymous", "getSecurityAnonymousOutput"], () => require("./getSecurityAnonymous"));
exports.getSecurityContentSelector = null;
exports.getSecurityContentSelectorOutput = null;
utilities.lazyLoad(exports, ["getSecurityContentSelector", "getSecurityContentSelectorOutput"], () => require("./getSecurityContentSelector"));
exports.getSecurityLdap = null;
exports.getSecurityLdapOutput = null;
utilities.lazyLoad(exports, ["getSecurityLdap", "getSecurityLdapOutput"], () => require("./getSecurityLdap"));
exports.getSecurityRealms = null;
exports.getSecurityRealmsOutput = null;
utilities.lazyLoad(exports, ["getSecurityRealms", "getSecurityRealmsOutput"], () => require("./getSecurityRealms"));
exports.getSecurityRole = null;
exports.getSecurityRoleOutput = null;
utilities.lazyLoad(exports, ["getSecurityRole", "getSecurityRoleOutput"], () => require("./getSecurityRole"));
exports.getSecuritySaml = null;
exports.getSecuritySamlOutput = null;
utilities.lazyLoad(exports, ["getSecuritySaml", "getSecuritySamlOutput"], () => require("./getSecuritySaml"));
exports.getSecuritySsl = null;
exports.getSecuritySslOutput = null;
utilities.lazyLoad(exports, ["getSecuritySsl", "getSecuritySslOutput"], () => require("./getSecuritySsl"));
exports.getSecuritySslTruststore = null;
exports.getSecuritySslTruststoreOutput = null;
utilities.lazyLoad(exports, ["getSecuritySslTruststore", "getSecuritySslTruststoreOutput"], () => require("./getSecuritySslTruststore"));
exports.getSecurityUser = null;
exports.getSecurityUserOutput = null;
utilities.lazyLoad(exports, ["getSecurityUser", "getSecurityUserOutput"], () => require("./getSecurityUser"));
exports.getSecurityUserToken = null;
exports.getSecurityUserTokenOutput = null;
utilities.lazyLoad(exports, ["getSecurityUserToken", "getSecurityUserTokenOutput"], () => require("./getSecurityUserToken"));
exports.MailConfig = null;
utilities.lazyLoad(exports, ["MailConfig"], () => require("./mailConfig"));
exports.PrivilegeApplication = null;
utilities.lazyLoad(exports, ["PrivilegeApplication"], () => require("./privilegeApplication"));
exports.PrivilegeRepositoryAdmin = null;
utilities.lazyLoad(exports, ["PrivilegeRepositoryAdmin"], () => require("./privilegeRepositoryAdmin"));
exports.PrivilegeRepositoryContentSelector = null;
utilities.lazyLoad(exports, ["PrivilegeRepositoryContentSelector"], () => require("./privilegeRepositoryContentSelector"));
exports.PrivilegeRepositoryView = null;
utilities.lazyLoad(exports, ["PrivilegeRepositoryView"], () => require("./privilegeRepositoryView"));
exports.PrivilegeScript = null;
utilities.lazyLoad(exports, ["PrivilegeScript"], () => require("./privilegeScript"));
exports.PrivilegeWildcard = null;
utilities.lazyLoad(exports, ["PrivilegeWildcard"], () => require("./privilegeWildcard"));
__exportStar(require("./provider"), exports);
const provider_1 = require("./provider");
exports.RepositoryAptHosted = null;
utilities.lazyLoad(exports, ["RepositoryAptHosted"], () => require("./repositoryAptHosted"));
exports.RepositoryAptProxy = null;
utilities.lazyLoad(exports, ["RepositoryAptProxy"], () => require("./repositoryAptProxy"));
exports.RepositoryBowerGroup = null;
utilities.lazyLoad(exports, ["RepositoryBowerGroup"], () => require("./repositoryBowerGroup"));
exports.RepositoryBowerHosted = null;
utilities.lazyLoad(exports, ["RepositoryBowerHosted"], () => require("./repositoryBowerHosted"));
exports.RepositoryBowerProxy = null;
utilities.lazyLoad(exports, ["RepositoryBowerProxy"], () => require("./repositoryBowerProxy"));
exports.RepositoryCargoGroup = null;
utilities.lazyLoad(exports, ["RepositoryCargoGroup"], () => require("./repositoryCargoGroup"));
exports.RepositoryCargoHosted = null;
utilities.lazyLoad(exports, ["RepositoryCargoHosted"], () => require("./repositoryCargoHosted"));
exports.RepositoryCargoProxy = null;
utilities.lazyLoad(exports, ["RepositoryCargoProxy"], () => require("./repositoryCargoProxy"));
exports.RepositoryCocoapodsProxy = null;
utilities.lazyLoad(exports, ["RepositoryCocoapodsProxy"], () => require("./repositoryCocoapodsProxy"));
exports.RepositoryConanProxy = null;
utilities.lazyLoad(exports, ["RepositoryConanProxy"], () => require("./repositoryConanProxy"));
exports.RepositoryCondaProxy = null;
utilities.lazyLoad(exports, ["RepositoryCondaProxy"], () => require("./repositoryCondaProxy"));
exports.RepositoryDockerGroup = null;
utilities.lazyLoad(exports, ["RepositoryDockerGroup"], () => require("./repositoryDockerGroup"));
exports.RepositoryDockerHosted = null;
utilities.lazyLoad(exports, ["RepositoryDockerHosted"], () => require("./repositoryDockerHosted"));
exports.RepositoryDockerProxy = null;
utilities.lazyLoad(exports, ["RepositoryDockerProxy"], () => require("./repositoryDockerProxy"));
exports.RepositoryGitlfsHosted = null;
utilities.lazyLoad(exports, ["RepositoryGitlfsHosted"], () => require("./repositoryGitlfsHosted"));
exports.RepositoryGoGroup = null;
utilities.lazyLoad(exports, ["RepositoryGoGroup"], () => require("./repositoryGoGroup"));
exports.RepositoryGoProxy = null;
utilities.lazyLoad(exports, ["RepositoryGoProxy"], () => require("./repositoryGoProxy"));
exports.RepositoryHelmHosted = null;
utilities.lazyLoad(exports, ["RepositoryHelmHosted"], () => require("./repositoryHelmHosted"));
exports.RepositoryHelmProxy = null;
utilities.lazyLoad(exports, ["RepositoryHelmProxy"], () => require("./repositoryHelmProxy"));
exports.RepositoryMavenGroup = null;
utilities.lazyLoad(exports, ["RepositoryMavenGroup"], () => require("./repositoryMavenGroup"));
exports.RepositoryMavenHosted = null;
utilities.lazyLoad(exports, ["RepositoryMavenHosted"], () => require("./repositoryMavenHosted"));
exports.RepositoryMavenProxy = null;
utilities.lazyLoad(exports, ["RepositoryMavenProxy"], () => require("./repositoryMavenProxy"));
exports.RepositoryNpmGroup = null;
utilities.lazyLoad(exports, ["RepositoryNpmGroup"], () => require("./repositoryNpmGroup"));
exports.RepositoryNpmHosted = null;
utilities.lazyLoad(exports, ["RepositoryNpmHosted"], () => require("./repositoryNpmHosted"));
exports.RepositoryNpmProxy = null;
utilities.lazyLoad(exports, ["RepositoryNpmProxy"], () => require("./repositoryNpmProxy"));
exports.RepositoryNugetGroup = null;
utilities.lazyLoad(exports, ["RepositoryNugetGroup"], () => require("./repositoryNugetGroup"));
exports.RepositoryNugetHosted = null;
utilities.lazyLoad(exports, ["RepositoryNugetHosted"], () => require("./repositoryNugetHosted"));
exports.RepositoryNugetProxy = null;
utilities.lazyLoad(exports, ["RepositoryNugetProxy"], () => require("./repositoryNugetProxy"));
exports.RepositoryP2Proxy = null;
utilities.lazyLoad(exports, ["RepositoryP2Proxy"], () => require("./repositoryP2Proxy"));
exports.RepositoryPypiGroup = null;
utilities.lazyLoad(exports, ["RepositoryPypiGroup"], () => require("./repositoryPypiGroup"));
exports.RepositoryPypiHosted = null;
utilities.lazyLoad(exports, ["RepositoryPypiHosted"], () => require("./repositoryPypiHosted"));
exports.RepositoryPypiProxy = null;
utilities.lazyLoad(exports, ["RepositoryPypiProxy"], () => require("./repositoryPypiProxy"));
exports.RepositoryRGroup = null;
utilities.lazyLoad(exports, ["RepositoryRGroup"], () => require("./repositoryRGroup"));
exports.RepositoryRHosted = null;
utilities.lazyLoad(exports, ["RepositoryRHosted"], () => require("./repositoryRHosted"));
exports.RepositoryRProxy = null;
utilities.lazyLoad(exports, ["RepositoryRProxy"], () => require("./repositoryRProxy"));
exports.RepositoryRawGroup = null;
utilities.lazyLoad(exports, ["RepositoryRawGroup"], () => require("./repositoryRawGroup"));
exports.RepositoryRawHosted = null;
utilities.lazyLoad(exports, ["RepositoryRawHosted"], () => require("./repositoryRawHosted"));
exports.RepositoryRawProxy = null;
utilities.lazyLoad(exports, ["RepositoryRawProxy"], () => require("./repositoryRawProxy"));
exports.RepositoryRubygemsGroup = null;
utilities.lazyLoad(exports, ["RepositoryRubygemsGroup"], () => require("./repositoryRubygemsGroup"));
exports.RepositoryRubygemsHosted = null;
utilities.lazyLoad(exports, ["RepositoryRubygemsHosted"], () => require("./repositoryRubygemsHosted"));
exports.RepositoryRubygemsProxy = null;
utilities.lazyLoad(exports, ["RepositoryRubygemsProxy"], () => require("./repositoryRubygemsProxy"));
exports.RepositoryYumGroup = null;
utilities.lazyLoad(exports, ["RepositoryYumGroup"], () => require("./repositoryYumGroup"));
exports.RepositoryYumHosted = null;
utilities.lazyLoad(exports, ["RepositoryYumHosted"], () => require("./repositoryYumHosted"));
exports.RepositoryYumProxy = null;
utilities.lazyLoad(exports, ["RepositoryYumProxy"], () => require("./repositoryYumProxy"));
exports.RoutingRule = null;
utilities.lazyLoad(exports, ["RoutingRule"], () => require("./routingRule"));
exports.Script = null;
utilities.lazyLoad(exports, ["Script"], () => require("./script"));
exports.SecurityAnonymous = null;
utilities.lazyLoad(exports, ["SecurityAnonymous"], () => require("./securityAnonymous"));
exports.SecurityContentSelector = null;
utilities.lazyLoad(exports, ["SecurityContentSelector"], () => require("./securityContentSelector"));
exports.SecurityLdap = null;
utilities.lazyLoad(exports, ["SecurityLdap"], () => require("./securityLdap"));
exports.SecurityLdapOrder = null;
utilities.lazyLoad(exports, ["SecurityLdapOrder"], () => require("./securityLdapOrder"));
exports.SecurityRealms = null;
utilities.lazyLoad(exports, ["SecurityRealms"], () => require("./securityRealms"));
exports.SecurityRole = null;
utilities.lazyLoad(exports, ["SecurityRole"], () => require("./securityRole"));
exports.SecuritySaml = null;
utilities.lazyLoad(exports, ["SecuritySaml"], () => require("./securitySaml"));
exports.SecuritySslTruststore = null;
utilities.lazyLoad(exports, ["SecuritySslTruststore"], () => require("./securitySslTruststore"));
exports.SecurityUser = null;
utilities.lazyLoad(exports, ["SecurityUser"], () => require("./securityUser"));
exports.SecurityUserToken = null;
utilities.lazyLoad(exports, ["SecurityUserToken"], () => require("./securityUserToken"));
// Export sub-modules:
const config = require("./config");
exports.config = config;
const types = require("./types");
exports.types = types;
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "nexus:index/blobstoreAzure:BlobstoreAzure":
                return new exports.BlobstoreAzure(name, undefined, { urn });
            case "nexus:index/blobstoreFile:BlobstoreFile":
                return new exports.BlobstoreFile(name, undefined, { urn });
            case "nexus:index/blobstoreGroup:BlobstoreGroup":
                return new exports.BlobstoreGroup(name, undefined, { urn });
            case "nexus:index/blobstoreS3:BlobstoreS3":
                return new exports.BlobstoreS3(name, undefined, { urn });
            case "nexus:index/mailConfig:MailConfig":
                return new exports.MailConfig(name, undefined, { urn });
            case "nexus:index/privilegeApplication:PrivilegeApplication":
                return new exports.PrivilegeApplication(name, undefined, { urn });
            case "nexus:index/privilegeRepositoryAdmin:PrivilegeRepositoryAdmin":
                return new exports.PrivilegeRepositoryAdmin(name, undefined, { urn });
            case "nexus:index/privilegeRepositoryContentSelector:PrivilegeRepositoryContentSelector":
                return new exports.PrivilegeRepositoryContentSelector(name, undefined, { urn });
            case "nexus:index/privilegeRepositoryView:PrivilegeRepositoryView":
                return new exports.PrivilegeRepositoryView(name, undefined, { urn });
            case "nexus:index/privilegeScript:PrivilegeScript":
                return new exports.PrivilegeScript(name, undefined, { urn });
            case "nexus:index/privilegeWildcard:PrivilegeWildcard":
                return new exports.PrivilegeWildcard(name, undefined, { urn });
            case "nexus:index/repositoryAptHosted:RepositoryAptHosted":
                return new exports.RepositoryAptHosted(name, undefined, { urn });
            case "nexus:index/repositoryAptProxy:RepositoryAptProxy":
                return new exports.RepositoryAptProxy(name, undefined, { urn });
            case "nexus:index/repositoryBowerGroup:RepositoryBowerGroup":
                return new exports.RepositoryBowerGroup(name, undefined, { urn });
            case "nexus:index/repositoryBowerHosted:RepositoryBowerHosted":
                return new exports.RepositoryBowerHosted(name, undefined, { urn });
            case "nexus:index/repositoryBowerProxy:RepositoryBowerProxy":
                return new exports.RepositoryBowerProxy(name, undefined, { urn });
            case "nexus:index/repositoryCargoGroup:RepositoryCargoGroup":
                return new exports.RepositoryCargoGroup(name, undefined, { urn });
            case "nexus:index/repositoryCargoHosted:RepositoryCargoHosted":
                return new exports.RepositoryCargoHosted(name, undefined, { urn });
            case "nexus:index/repositoryCargoProxy:RepositoryCargoProxy":
                return new exports.RepositoryCargoProxy(name, undefined, { urn });
            case "nexus:index/repositoryCocoapodsProxy:RepositoryCocoapodsProxy":
                return new exports.RepositoryCocoapodsProxy(name, undefined, { urn });
            case "nexus:index/repositoryConanProxy:RepositoryConanProxy":
                return new exports.RepositoryConanProxy(name, undefined, { urn });
            case "nexus:index/repositoryCondaProxy:RepositoryCondaProxy":
                return new exports.RepositoryCondaProxy(name, undefined, { urn });
            case "nexus:index/repositoryDockerGroup:RepositoryDockerGroup":
                return new exports.RepositoryDockerGroup(name, undefined, { urn });
            case "nexus:index/repositoryDockerHosted:RepositoryDockerHosted":
                return new exports.RepositoryDockerHosted(name, undefined, { urn });
            case "nexus:index/repositoryDockerProxy:RepositoryDockerProxy":
                return new exports.RepositoryDockerProxy(name, undefined, { urn });
            case "nexus:index/repositoryGitlfsHosted:RepositoryGitlfsHosted":
                return new exports.RepositoryGitlfsHosted(name, undefined, { urn });
            case "nexus:index/repositoryGoGroup:RepositoryGoGroup":
                return new exports.RepositoryGoGroup(name, undefined, { urn });
            case "nexus:index/repositoryGoProxy:RepositoryGoProxy":
                return new exports.RepositoryGoProxy(name, undefined, { urn });
            case "nexus:index/repositoryHelmHosted:RepositoryHelmHosted":
                return new exports.RepositoryHelmHosted(name, undefined, { urn });
            case "nexus:index/repositoryHelmProxy:RepositoryHelmProxy":
                return new exports.RepositoryHelmProxy(name, undefined, { urn });
            case "nexus:index/repositoryMavenGroup:RepositoryMavenGroup":
                return new exports.RepositoryMavenGroup(name, undefined, { urn });
            case "nexus:index/repositoryMavenHosted:RepositoryMavenHosted":
                return new exports.RepositoryMavenHosted(name, undefined, { urn });
            case "nexus:index/repositoryMavenProxy:RepositoryMavenProxy":
                return new exports.RepositoryMavenProxy(name, undefined, { urn });
            case "nexus:index/repositoryNpmGroup:RepositoryNpmGroup":
                return new exports.RepositoryNpmGroup(name, undefined, { urn });
            case "nexus:index/repositoryNpmHosted:RepositoryNpmHosted":
                return new exports.RepositoryNpmHosted(name, undefined, { urn });
            case "nexus:index/repositoryNpmProxy:RepositoryNpmProxy":
                return new exports.RepositoryNpmProxy(name, undefined, { urn });
            case "nexus:index/repositoryNugetGroup:RepositoryNugetGroup":
                return new exports.RepositoryNugetGroup(name, undefined, { urn });
            case "nexus:index/repositoryNugetHosted:RepositoryNugetHosted":
                return new exports.RepositoryNugetHosted(name, undefined, { urn });
            case "nexus:index/repositoryNugetProxy:RepositoryNugetProxy":
                return new exports.RepositoryNugetProxy(name, undefined, { urn });
            case "nexus:index/repositoryP2Proxy:RepositoryP2Proxy":
                return new exports.RepositoryP2Proxy(name, undefined, { urn });
            case "nexus:index/repositoryPypiGroup:RepositoryPypiGroup":
                return new exports.RepositoryPypiGroup(name, undefined, { urn });
            case "nexus:index/repositoryPypiHosted:RepositoryPypiHosted":
                return new exports.RepositoryPypiHosted(name, undefined, { urn });
            case "nexus:index/repositoryPypiProxy:RepositoryPypiProxy":
                return new exports.RepositoryPypiProxy(name, undefined, { urn });
            case "nexus:index/repositoryRGroup:RepositoryRGroup":
                return new exports.RepositoryRGroup(name, undefined, { urn });
            case "nexus:index/repositoryRHosted:RepositoryRHosted":
                return new exports.RepositoryRHosted(name, undefined, { urn });
            case "nexus:index/repositoryRProxy:RepositoryRProxy":
                return new exports.RepositoryRProxy(name, undefined, { urn });
            case "nexus:index/repositoryRawGroup:RepositoryRawGroup":
                return new exports.RepositoryRawGroup(name, undefined, { urn });
            case "nexus:index/repositoryRawHosted:RepositoryRawHosted":
                return new exports.RepositoryRawHosted(name, undefined, { urn });
            case "nexus:index/repositoryRawProxy:RepositoryRawProxy":
                return new exports.RepositoryRawProxy(name, undefined, { urn });
            case "nexus:index/repositoryRubygemsGroup:RepositoryRubygemsGroup":
                return new exports.RepositoryRubygemsGroup(name, undefined, { urn });
            case "nexus:index/repositoryRubygemsHosted:RepositoryRubygemsHosted":
                return new exports.RepositoryRubygemsHosted(name, undefined, { urn });
            case "nexus:index/repositoryRubygemsProxy:RepositoryRubygemsProxy":
                return new exports.RepositoryRubygemsProxy(name, undefined, { urn });
            case "nexus:index/repositoryYumGroup:RepositoryYumGroup":
                return new exports.RepositoryYumGroup(name, undefined, { urn });
            case "nexus:index/repositoryYumHosted:RepositoryYumHosted":
                return new exports.RepositoryYumHosted(name, undefined, { urn });
            case "nexus:index/repositoryYumProxy:RepositoryYumProxy":
                return new exports.RepositoryYumProxy(name, undefined, { urn });
            case "nexus:index/routingRule:RoutingRule":
                return new exports.RoutingRule(name, undefined, { urn });
            case "nexus:index/script:Script":
                return new exports.Script(name, undefined, { urn });
            case "nexus:index/securityAnonymous:SecurityAnonymous":
                return new exports.SecurityAnonymous(name, undefined, { urn });
            case "nexus:index/securityContentSelector:SecurityContentSelector":
                return new exports.SecurityContentSelector(name, undefined, { urn });
            case "nexus:index/securityLdap:SecurityLdap":
                return new exports.SecurityLdap(name, undefined, { urn });
            case "nexus:index/securityLdapOrder:SecurityLdapOrder":
                return new exports.SecurityLdapOrder(name, undefined, { urn });
            case "nexus:index/securityRealms:SecurityRealms":
                return new exports.SecurityRealms(name, undefined, { urn });
            case "nexus:index/securityRole:SecurityRole":
                return new exports.SecurityRole(name, undefined, { urn });
            case "nexus:index/securitySaml:SecuritySaml":
                return new exports.SecuritySaml(name, undefined, { urn });
            case "nexus:index/securitySslTruststore:SecuritySslTruststore":
                return new exports.SecuritySslTruststore(name, undefined, { urn });
            case "nexus:index/securityUser:SecurityUser":
                return new exports.SecurityUser(name, undefined, { urn });
            case "nexus:index/securityUserToken:SecurityUserToken":
                return new exports.SecurityUserToken(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("nexus", "index/blobstoreAzure", _module);
pulumi.runtime.registerResourceModule("nexus", "index/blobstoreFile", _module);
pulumi.runtime.registerResourceModule("nexus", "index/blobstoreGroup", _module);
pulumi.runtime.registerResourceModule("nexus", "index/blobstoreS3", _module);
pulumi.runtime.registerResourceModule("nexus", "index/mailConfig", _module);
pulumi.runtime.registerResourceModule("nexus", "index/privilegeApplication", _module);
pulumi.runtime.registerResourceModule("nexus", "index/privilegeRepositoryAdmin", _module);
pulumi.runtime.registerResourceModule("nexus", "index/privilegeRepositoryContentSelector", _module);
pulumi.runtime.registerResourceModule("nexus", "index/privilegeRepositoryView", _module);
pulumi.runtime.registerResourceModule("nexus", "index/privilegeScript", _module);
pulumi.runtime.registerResourceModule("nexus", "index/privilegeWildcard", _module);
pulumi.runtime.registerResourceModule("nexus", "index/repositoryAptHosted", _module);
pulumi.runtime.registerResourceModule("nexus", "index/repositoryAptProxy", _module);
pulumi.runtime.registerResourceModule("nexus", "index/repositoryBowerGroup", _module);
pulumi.runtime.registerResourceModule("nexus", "index/repositoryBowerHosted", _module);
pulumi.runtime.registerResourceModule("nexus", "index/repositoryBowerProxy", _module);
pulumi.runtime.registerResourceModule("nexus", "index/repositoryCargoGroup", _module);
pulumi.runtime.registerResourceModule("nexus", "index/repositoryCargoHosted", _module);
pulumi.runtime.registerResourceModule("nexus", "index/repositoryCargoProxy", _module);
pulumi.runtime.registerResourceModule("nexus", "index/repositoryCocoapodsProxy", _module);
pulumi.runtime.registerResourceModule("nexus", "index/repositoryConanProxy", _module);
pulumi.runtime.registerResourceModule("nexus", "index/repositoryCondaProxy", _module);
pulumi.runtime.registerResourceModule("nexus", "index/repositoryDockerGroup", _module);
pulumi.runtime.registerResourceModule("nexus", "index/repositoryDockerHosted", _module);
pulumi.runtime.registerResourceModule("nexus", "index/repositoryDockerProxy", _module);
pulumi.runtime.registerResourceModule("nexus", "index/repositoryGitlfsHosted", _module);
pulumi.runtime.registerResourceModule("nexus", "index/repositoryGoGroup", _module);
pulumi.runtime.registerResourceModule("nexus", "index/repositoryGoProxy", _module);
pulumi.runtime.registerResourceModule("nexus", "index/repositoryHelmHosted", _module);
pulumi.runtime.registerResourceModule("nexus", "index/repositoryHelmProxy", _module);
pulumi.runtime.registerResourceModule("nexus", "index/repositoryMavenGroup", _module);
pulumi.runtime.registerResourceModule("nexus", "index/repositoryMavenHosted", _module);
pulumi.runtime.registerResourceModule("nexus", "index/repositoryMavenProxy", _module);
pulumi.runtime.registerResourceModule("nexus", "index/repositoryNpmGroup", _module);
pulumi.runtime.registerResourceModule("nexus", "index/repositoryNpmHosted", _module);
pulumi.runtime.registerResourceModule("nexus", "index/repositoryNpmProxy", _module);
pulumi.runtime.registerResourceModule("nexus", "index/repositoryNugetGroup", _module);
pulumi.runtime.registerResourceModule("nexus", "index/repositoryNugetHosted", _module);
pulumi.runtime.registerResourceModule("nexus", "index/repositoryNugetProxy", _module);
pulumi.runtime.registerResourceModule("nexus", "index/repositoryP2Proxy", _module);
pulumi.runtime.registerResourceModule("nexus", "index/repositoryPypiGroup", _module);
pulumi.runtime.registerResourceModule("nexus", "index/repositoryPypiHosted", _module);
pulumi.runtime.registerResourceModule("nexus", "index/repositoryPypiProxy", _module);
pulumi.runtime.registerResourceModule("nexus", "index/repositoryRGroup", _module);
pulumi.runtime.registerResourceModule("nexus", "index/repositoryRHosted", _module);
pulumi.runtime.registerResourceModule("nexus", "index/repositoryRProxy", _module);
pulumi.runtime.registerResourceModule("nexus", "index/repositoryRawGroup", _module);
pulumi.runtime.registerResourceModule("nexus", "index/repositoryRawHosted", _module);
pulumi.runtime.registerResourceModule("nexus", "index/repositoryRawProxy", _module);
pulumi.runtime.registerResourceModule("nexus", "index/repositoryRubygemsGroup", _module);
pulumi.runtime.registerResourceModule("nexus", "index/repositoryRubygemsHosted", _module);
pulumi.runtime.registerResourceModule("nexus", "index/repositoryRubygemsProxy", _module);
pulumi.runtime.registerResourceModule("nexus", "index/repositoryYumGroup", _module);
pulumi.runtime.registerResourceModule("nexus", "index/repositoryYumHosted", _module);
pulumi.runtime.registerResourceModule("nexus", "index/repositoryYumProxy", _module);
pulumi.runtime.registerResourceModule("nexus", "index/routingRule", _module);
pulumi.runtime.registerResourceModule("nexus", "index/script", _module);
pulumi.runtime.registerResourceModule("nexus", "index/securityAnonymous", _module);
pulumi.runtime.registerResourceModule("nexus", "index/securityContentSelector", _module);
pulumi.runtime.registerResourceModule("nexus", "index/securityLdap", _module);
pulumi.runtime.registerResourceModule("nexus", "index/securityLdapOrder", _module);
pulumi.runtime.registerResourceModule("nexus", "index/securityRealms", _module);
pulumi.runtime.registerResourceModule("nexus", "index/securityRole", _module);
pulumi.runtime.registerResourceModule("nexus", "index/securitySaml", _module);
pulumi.runtime.registerResourceModule("nexus", "index/securitySslTruststore", _module);
pulumi.runtime.registerResourceModule("nexus", "index/securityUser", _module);
pulumi.runtime.registerResourceModule("nexus", "index/securityUserToken", _module);
pulumi.runtime.registerResourcePackage("nexus", {
    version: utilities.getVersion(),
    constructProvider: (name, type, urn) => {
        if (type !== "pulumi:providers:nexus") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new provider_1.Provider(name, undefined, { urn });
    },
});
//# sourceMappingURL=index.js.map